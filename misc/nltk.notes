* Natural Language Toolkit
* Edward Loper
*
* This file contains some of my own personal ramblings on the toolkit, 
* what I intend to do next, and what its current state is.  It will
* most likely be a fairly dynamic file, whose contents are mainly
* just interesting to me. :)
*
* $Id$

> Plan for the Future

1. Prepare the repository to put it on sourceforge
2. Make web pages for source forge
3. Make a script to update the source forge page with new
   distributions and documentation.

4. Draw up a timetable, dividing the task into subtasks, & mapping
   those tasks to modules, etc.

>> Things to do:


> Design
>> Data Classes
  - Set
  - FreqDist
  - Word (words can be tagged, analyzed, etc.)
  - SyntaxTree
  - FreqDist
  - ProbDist

>> Processing Classes
  - Tokenizer: string \to [Word].  
      - TaggedTokenizer deals with the/DT, etc.
      - ChunkTokenizer?  Doesn't return [Word!!]
        Maybe use a ChunkReader?
  - Parser: string \to [SyntaxTree]
      - ChunkParser: returns 1-layer NP trees
      - ChartParser
  - Tagger: [Word] \to [(tag, Word)]?
    or [Word] \to [TaggedWord]
    or [Word] \to [Word] with some words as TaggedWord.
      - Tagger using FreqDist or ProbDist?
  - LanguageModel: train on data, can generate or 

>> Pset correlation
Pset 1

Pset 2
  - TaggedTokenizer
  - FreqDistTagger
    - FreqDist
  - FallbackTagger: takes multiple taggers as args
  - TaggedChunkTokenizer
  - RegexChunker
Pset 3

Pset 4


> Ramblings\ldots

>> Equality Comparison
Summary: how do I want equality comparison to interact with
subclassing?  i.e., how do I want to define "equality".  When does
this matter?  Do I use much subclassing?

is not as easy as it should be.  The "obvious" thing to do is
something like:
    if not isinstance(other, MyClass): return 0

but this doesn't handle class hierarchies well, etc.  We can return
NotImplemented when we want to, too..  Hm.

So what do I want to do?  Raise an exception if there's not an exact
type match?  That seems reasonable, I guess.  The only other
reasonable alternative would be for the child class to defer to the
parent class.

But that seems.. strange.
So how do we check if something's of the right class?  Do I have to
use __class__?  That seems icky.  But I can do it with:

def __eq__(self, other):
    if not isinstance(other, MyClass): 
        raise TypeError('Equality test with non-MyClass')
    if other.__class__ != MyClass: 
        raise TypeError('Equality test with non-MyClass')
    return <appropriate expression>

sameclass(self, other)

[07/03/02 04:55 PM]
> Some questions/issues\ldots
Variable names:
  - don't use "freqdist" for conditional freq dists?
  - use freqdist and probdist, not fdist and pdist?
  - use fd\_list and fv\_list, not fdlist and fvlist?

> Things to do:
  - turn chunker into a real parser?
  - mutltivalue stuff?
  - update classifier tutorial?
  - update other tutorials?
  - fix chart parser tool
