[10/02/01 03:38 PM]

I believe that we need to define some new conventions for defining
ordering and equality comparisons.  The current system was designed
with type safety in mind: it raises exceptions if objects of different
types are compared.  We also raise exceptions when ordering is tested
on non-ordered objects. However, this has a few problems:

    - It doesn't deal with None: comparing to None gives exceptions
    - It doesn't work with anything that uses __cmp__ (unit testing,
      sorting, etc)
    - others?

We need a consistant set of conventions that we can use to define
equality between objects in the toolkit.  Some issues are:

    - what to do when we compare superclass/subclass for
      equality/ordering?
    - Some ordering notions can be difficult.. E.g., ordering among
      locations: say that they're partially ordered?  If we define <
      as strictly preceeds, then <= should be defined as either equal
      or strictly preceeds (but not overlaps).  This is
      non-intuitive..

My tentative proposal:
    - Each object is defined as belonging to one of the following classes: 
        - non-comperable
        - equality-comperable
        - ordered

    - Non-comparable objects
        - Define __cmp__, which raises an exception.

    - Equality-comperable objects
        - Define __eq__, which tests if a=b
        - Define __ne__, which tests if a!=b
        - Define __lt__, __le__, __gt__, __ge__, all of which raise
          exceptions.
        - Define __cmp__.  If a!=b, then __cmp__ returns -1.

    - Ordered
        - Define __eq__, which tests if a=b
        - Define __ne__, which tests if a!=b
        - Define __lt__, __le__, __gt__, __ge__, none of which raise
          exceptions.
        - Define __cmp__.

    - To avoid confusion, partially ordered classes (such as Location)
      are considered equality-comperable, *not* ordered.  To compare
      instances, you must use member functions, such as preceeds(),
      overlaps(), etc.

    - If an object is compared with an object of an inappropriate type
      using __eq__, __ne__, or __cmp__, it does not issue an
      exception; it just indicates that the objects are not equal.
      For ordered objects, __cmp__ should return -1 if the given
      object is of an inappropriate type.

    - If an object is compared with an object of an inappropriate type
      using __lt__, __gt__, __le__, or __ge__, raise an exception.
      This includes comparisons with None, since there is no
      meaningful order between None and an ordered object.

