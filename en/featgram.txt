.. -*- mode: rst -*-
.. include:: ../definitions.txt

========================
9. Feature Based Grammar
========================

--------------
 Introduction
--------------




-----------------
Agreement in CFGs
-----------------

The Problem
-----------

Consider the following contrasts:

.. _thisdog:
.. ex::
   .. ex::
      this dog
   .. ex::
      \*these dog

.. _thesedogs:
.. ex::
   .. ex::
      these dogs
   .. ex::
      \*this dog

In English, nouns are usually morphologically marked as being singular
or plural. The form of the demonstrative modifier also varies in a
similar way; there is a singular form `this`:lx: and a plural form `these`:lx:.
Examples thisdog_ and thesedogs_ show that there are constraints on
the realization of demonstratives and nouns within a noun phrase:
either both are singular or both are plural. A similar kind
of constraint is observed with subjects and predicates:

.. _subjpredsg:
.. ex::
   .. ex::
      the dog runs
   .. ex::
      \*the dog run

.. _subjpredpl:
.. ex::
   .. ex::
      the dogs run
   .. ex::
      \*the dogs runs


Here again, we can see that formal properties of the verb co-vary
with formal properties of the subject noun phrase; this co-variance is
usually termed `agreement`:dt: The element which determines the
agreement, here the subject noun phrase, is called the agreement
`controller`:dt:, while the element whose form is determined by
agreement, here the verb, is called the `target`:dt:.
If we look further at verb agreement in English, we will see that
present tense verbs typically have two inflected forms: one for third person
singular, and another for every other combination of person and
number:

.. ex::
 +--------+--------+--------+
 |        |singular|plural  |
 +--------+--------+--------+
 |1       |run     |run     |
 +--------+--------+--------+
 |2       |run     |run     |
 +--------+--------+--------+
 |3       |runs    |run     |
 +--------+--------+--------+

We can make the role of morphological properties a bit more explicit as
illustrated in runs_ and run_. These representations indicate that the verb agrees with its
subject in person and number.

.. _runs:
.. ex::

 +----------+----------+----------+
 |the       |dog       |run-s     |
 +----------+----------+----------+
 |          |dog.3.SG  |run-3.SG  |
 +----------+----------+----------+


.. _run:
.. ex::

 +------------+------------+------------+
 |the         |dog-s       |run         |
 +------------+------------+------------+
 |            |dog-3.PL    |run.3.PL    |
 +------------+------------+------------+


Despite the undoubted interest of agreement as a topic in its own
right, we have introduced it here for another reason: we want to look
at what happens when  we try encode agreement constraints in a context-free grammar. 
Suppose we take as our starting point the very simple CFG in agcfg0_.

.. _agcfg0:
.. ex::
   .. parsed-literal::

     `S`:gc: |rarr| `NP VP`:gc:
     `NP`:gc: |rarr| `Det N`:gc: 
     `VP`:gc: |rarr| `V`:gc: 

     `Det`:gc: |rarr| 'this'
     `N`:gc: |rarr| 'dog'
     `V`:gc: |rarr| 'runs'

agcfg0_ allows us to generate the sentence `this dog runs`:lx:;
however, what we really want to do is also generate `these dogs
run`:lx: while blocking unwanted strings such as `*this dogs run`:lx:
and `*these dog runs`:lx:. The most straightforward approach is to
add new non-terminals and productions to the grammar which reflect our
number distinctions and agreement constraints (we ignore person for the time being):

.. _agcfg1:
.. ex::
   .. parsed-literal::

     `S_SG`:gc: |rarr| `NP_SG VP_SG`:gc:
     `S_PL`:gc: |rarr| `NP_PL VP_PL`:gc:
     `NP_SG`:gc: |rarr| `Det_SG N_SG`:gc: 
     `NP_PL`:gc: |rarr| `Det_PL N_PL`:gc: 
     `VP_SG`:gc: |rarr| `V_SG`:gc: 
     `VP_PL`:gc: |rarr| `V_PL`:gc: 

     `Det_SG`:gc: |rarr| 'this'
     `Det_PL`:gc: |rarr| 'these'
     `N_SG`:gc: |rarr| 'dog'
     `N_PL`:gc: |rarr| 'dogs'
     `V_SG`:gc: |rarr| 'runs'
     `V_PL`:gc: |rarr| 'run'

It should be clear that this grammar will do the required
task, but only at the cost of duplicating our previous set of
rules. Rule multiplication is of course more severe if we add in
person agreement constraints.

Exercises
---------

#. Augment agcfg1_ so that it will generate strings like `I am
   happy`:lx: and `she is happy`:lx: but not `*you is happy`:lx: or
   `*they am happy`:lx:.

#. Augment agcfg1_ so that it will correctly describe the following
   Spanish noun phrases:

   .. ex::
      .. ex::

	 +---------------------+--------------------+--------------------+
	 |un                   |cuadro              |hermos-o            |
	 +---------------------+--------------------+--------------------+
	 |INDEF.SG.MASC        |picture             |beautiful-SG.MASC   |
	 +---------------------+--------------------+--------------------+
	 |'a beautiful picture'                     |                    |
	 +------------------------------------------+--------------------+

      .. ex::

	 +---------------------+--------------------+--------------------+
	 |un-os                |cuadro-s            |hermos-os           |
	 +---------------------+--------------------+--------------------+
	 |INDEF-PL.MASC        |picture-PL          |beautiful-PL.MASC   |
	 +---------------------+--------------------+--------------------+
	 |'beautiful pictures'                      |                    |
	 +------------------------------------------+--------------------+

      .. ex::

	 +---------------------+--------------------+--------------------+
	 |un-a                 |cortina             |hermos-a            |
	 +---------------------+--------------------+--------------------+
	 |INDEF-SG.FEM         |curtain             |beautiful-SG.FEM    |
	 +---------------------+--------------------+--------------------+
	 |'a beautiful curtain'                     |                    |
	 +------------------------------------------+--------------------+

      .. ex::

	 +---------------------+--------------------+--------------------+
	 |un-as                |cortina-s           |hermos-as           |
	 +---------------------+--------------------+--------------------+
	 |INDEF-PL.FEM         |curtain-PL          |beautiful-SG.FEM    |
	 +---------------------+--------------------+--------------------+
	 |'beautiful curtains'                      |                    |
	 +------------------------------------------+--------------------+

.. In grammatical terms, we might say that both nouns and
   demonstratives have a property of `number`:gc: which can take the values singular or
   plural.


Using Attributes and Constraints
--------------------------------

We spoke informally of linguistic categories having *properties*; for
example, that a verb has the property of being plural. Let's try to
make this more explicit:

.. _num0:
.. ex::
   .. parsed-literal::

     `N`:gc:\ [`num`:feat: = `pl`:fval:\ ]

In num0_, we have introduced some  new notation which says that the category `N`:gc: has a 
`feature`:dt: called `num`:feat: (short for 'number') and that the
value of this feature is `pl`:fval: (short for 'plural'). We can add
similar annotations to other categories, and use them in lexical
entries:

.. _agcfg2:
.. ex::
   .. parsed-literal::

     `Det`:gc:\ [`num`:feat: = `sg`:fval:\ ] |rarr| 'this'
     `Det`:gc:\ [`num`:feat: = `pl`:fval:\ ]  |rarr| 'these'
     `N`:gc:\ [`num`:feat: = `sg`:fval:\ ] |rarr| 'dog'
     `N`:gc:\ [`num`:feat: = `pl`:fval:\ ] |rarr| 'dogs'
     `V`:gc:\ [`num`:feat: = `sg`:fval:\ ] |rarr| 'runs'
     `V`:gc:\ [`num`:feat: = `pl`:fval:\ ] |rarr| 'run'

Does this help at all? So far, it looks just like a slightly more
verbose alternative to what was specified in agcfg1_. Things become
more interesting when we allow *variables* over feature values, and use
these to state constraints. This is illustrated in agcfg3_.

.. _agcfg3:
.. ex::
   .. _srule:
   .. ex::
      .. parsed-literal::

        `S`:gc: |rarr| `NP`:gc:\ [`num`:feat: = `?n`:math:\ ] `VP`:gc:\ [`num`:feat: = `?n`:math:\ ]

   .. _nprule:
   .. ex::
      .. parsed-literal::

       `NP`:gc:\ [`num`:feat: = `?n`:math:\ ] |rarr| `Det`:gc:\ [`num`:feat: = `?n`:math:\ ] `N`:gc:\ [`num`:feat: = `?n`:math:\ ]

   .. _vprule:
   .. ex::
      .. parsed-literal::

       `VP`:gc:\ [`num`:feat: = `?n`:math:\ ] |rarr| `V`:gc:\ [`num`:feat: = `?n`:math:\ ]

We are using '`?n`:math:' as a variable over values of `num`:feat:; it can
be instantiated either to `sg`:fval: or `pl`:fval:. Its scope is
limited to individual rules. That is, within srule_, for example,
`?n`:math: must be instantiated to the same constant value; we can
read the rule as saying that whatever value `NP`:gc: takes for the feature
`num`:feat:, `VP`:gc: must take the same value. 

In order to understand how these feature constraints work, it's
helpful to think about how one would go about building a tree. Lexical
rules will admit the following `local`:dt: trees (that is, trees of
depth one):

.. ex::
   .. _this:
   .. ex:: 
      .. tree:: (Det[num=sg] this) 
   .. _these:
   .. ex:: 
      .. tree:: (Det[num=pl] these) 

.. ex::
   .. _dog:
   .. ex:: 
      .. tree:: (N[num=sg] dog) 
   .. _dogs:
   .. ex:: 
      .. tree:: (N[num=pl] dogs) 

Now nprule_ says that whatever the `num`:feat: values of `N`:gc: and
`Det`:gc: are, they have to be the same. Consequently,  nprule_ will
permit this_ and dog_ to be combined into an `NP`:gc:  as shown in
good1_ and it will also allow these_ and dogs_ to be combined, as in
good2_. By contrast,  bad1_ and bad2_ are prohibited because the roots
of their
constituent local trees differ in their values for the `num`:feat: feature.

.. ex::
   .. _good1:
   .. ex::
      .. tree:: (NP[num=pl] (Det[num=sg] this)(N[num=sg] dog))

   .. _good2:
   .. ex::
      .. tree:: (NP[num=pl] (Det[num=pl] these)(N[num=pl] dogs))

.. ex::
   .. _bad1:
   .. ex::
      .. tree:: (NP[num=...] (Det[num=sg] this)(N[num=pl] dogs))

   .. _bad2:
   .. ex::
      .. tree:: (NP[num=...] (Det[num=pl] these)(N[num=sg] dog))

Rule vprule_ can be thought of as saying that `num`:feat: value of the
head verb has to be the same as the `num`:feat: value of the `VP`:gc:
mother. Combined with srule_, we derive the consequence that if the
`num`:feat: value of the subject head noun is `pl`:fval:, then so is
the `num`:feat: value of the `VP`:gc:\ 's head verb.

.. ex::
   .. tree:: (S (NP[num=pl] (Det[num=pl] these)(N[num=pl] dogs))(VP[num=pl] (V[num=pl] run)))

In NLTK, we can use `featuredemo` to parse feature-based grammars;
feat0cfg_ is a simple example of such a grammar. It illustrates a
small but important point, namely that a feature annotation on a
syntactic category can contain more than one specification; for example,
`IV`:gc:\ [`tense`:feat: = `pres`:fval:, `num`:feat: = `pl`:fval:\ ].

.. _feat0cfg:
.. ex::
   ::

     S -> NP[num=?n] VP[num=?n]

     NP[num=?n] -> N[num=?n] 
     NP[num=?n] -> PropN[num=?n] 
     NP[num=?n] -> Det[num=?n] N[num=?n] 

     VP[tense=?t, num=?n] -> V[tense=?t, num=?n]
     VP[tense=?t, num=?n] -> V[tense=?t, num=?n] NP

     Det[num=sg] -> 'this' | 'every'
     Det[num=pl] -> 'these' | 'all'
     Det[num=sg] -> 'the' | 'some'
     Det[num=?n] -> 'the' | 'some'


     PropN[num=sg]-> 'Kim' | 'Jody'

     N[num=sg] -> 'dog' | 'girl' | 'car' | 'child'
     N[num=pl] -> 'dogs' | 'girls' | 'cars' | 'children' 

     V[tense=pres,  num=sg] -> 'disappears' | 'walks'
     V[tense=pres, num=sg] -> 'sees' | 'likes'

     V[tense=pres,  num=pl] -> 'disappear' | 'walk'
     V[tense=pres, num=pl] -> 'see' | 'like'

     V[tense=past, num=?n] -> 'disappeared' | 'walked'
     V[tense=past, num=?n] -> 'saw' | 'liked'



Parsing `Jody likes these children`:lx: with the grammar in feat0cfg_ yields the following output.

.. ex::
   ::

     ([INIT]:
       (Start:
	 (S:
	   (NP[num=sg]: (PropN[num=sg]: 'Jody'))
	   (VP[num=sg, tense=pres]:
	     (V[num=sg, tense=pres]: 'likes')
	     (NP[num=pl]: (Det[num=?n]: 'the') (N[num=pl]: 'children'))))))



Terminology
-----------


So far, we have only seen feature values like `sg`:fval: and
`pl`:fval. These simple values are usually called `atomic`:dt:
|mdash| that is, they can't be decomposed into subparts. A special
case of atomic values are `boolean`:dt: values, that is, values which
just specify whether a property is true or false of a category. For
example, we might want to distinguish `auxiliary`:dt: verbs such as
`can`:lx:, `may`:lx:, `will`:lx: and `do`:lx: with the boolean feature
`aux`:feat:. Thus, our lexicon for verbs might include entries such as
the following:

.. ex::
      .. parsed-literal::

        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `aux`:feat: = `+`:math:\ ] |rarr| 'can'
        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `aux`:feat: = `+`:math:\ ] |rarr| 'may'

        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `aux`:feat: = `-`:math:\ ] |rarr| 'walks'
        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `aux`:feat: = `-`:math:\ ] |rarr| 'likes'


A frequently used abbreviation for boolean features allows the value
to be prepended to the feature:

.. ex::
      .. parsed-literal::

        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `+aux`:feat:\ ] |rarr| 'can'
        `V`:gc:\ [`tense`:feat: = `pres`:fval:, `-aux`:feat:\ ] |rarr| 'walks'


We have spoken informally of attaching 'feature annotations' to
syntactic categories. A more general
approach is to treat the whole category |mdash| that is, the
non-terminal symbol plus the annotation |mdash| as a bundle of
features. Consider, for example, the object we have written as ncat0_.

.. _ncat0:
.. ex::
      .. parsed-literal::

        `N`:gc:\ [`num`:feat: = `sg`:fval:\ ] 

The syntactic category `N`:gc:, as we have seen before, provides part
of speech information. This information can itself be captured as a
feature specification, as shown in ncat1_.

.. _ncat1:
.. ex::
      .. parsed-literal::

        [`pos`:feat: = `N`:fval:, `num`:feat: = `sg`:fval:\ ] 

In fact, we  regard ncat1_ as our 'official' representation of a
feature-based linguistic category, and
ncat0_ as a convenient abbreviation.
A bundle of feature-value pairs is called a `feature structure`:dt:
or an `attribute value matrix`:dt: (AVM). A feature structure which
contains a specification for the feature `pos`:feat: is a `linguistic
category`:dt:. 

In addition to atomic-valued features, we allow features whose values
are themselves feature structures. For example, we might want to group
together agreement features (e.g., person, number and gender) as a
distinguished part of a category, as shown in agr0_.

.. _agr0:
.. ex::
      .. avm::

        [pos: N
         agr: [per: 3
               num: pl
               gend: fem]]



Unification
-----------

Reentrancy

Graph-based representation of feature structures

Discuss and illustrate NLTK's `featurestructure` module. 


Subcatorization
---------------

In the chapter `Parsing <parse.html>`__, we proposed to augment our
category labels in order to represent different subcategories of
verb. More specifically,
we introduced labels such as `Vitr`:gc: and `Vtr`:gc: for intransitive
and transitive verbs respectively.  This allowed us to write rules
like the following:

.. _subcatcfg0:
.. ex::
   .. parsed-literal::

      `VP`:gc:  |rarr| `V_itr`:gc:  
      `VP`:gc:  |rarr| `V_tr NP`:gc: 

Although it is tempting to think of `V_itr`:gc: and `V_tr`:gc: as two
kinds of `V`:gc:, this is unjustified: from a formal point of view,
`V_itr`:gc: has no closer relationship with `V_tr`:gc: than it does,
say, with `NP`:gc:. As it stands, `V_itr`:gc: and `V_tr`:gc: are
unanalyzable nonterminal symbols from a CFG. One unwelcome consequence
is that we do not seem able to say anything about the class of verbs
in general. For example, we cannot say something like "All lexical
items of category `V`:gc: can be marked for tense", since `bark`:lx:,
say, is an item of category `V_itr`:gc:, not `V`:gc:.

Using features gives us some useful room for manoeuvre but there is no
obvious consensus on how to model subcategorization information. One
approach which has the merit of simplicity is due to Generalized
Phrase Structure Grammar (GPSG). GPSG stipulates that lexical
categories may bear a `subcat`:feat: whose values are integers. This
is illustrated in a modified portion of feat0cfg_, shown in subcatgpsg_.

.. _subcatgpsg:
.. ex::
   ::

     VP[tense=?t, num=?n] -> V[subcat=0, tense=?t, num=?n]
     VP[tense=?t, num=?n] -> V[subcat=1, tense=?t, num=?n] NP

     V[subcat=0, tense=pres,  num=sg] -> 'disappears' | 'walks'
     V[subcat=1, tense=pres, num=sg] -> 'sees' | 'likes'

     V[subcat=0, tense=pres,  num=pl] -> 'disappear' | 'walk'
     V[subcat=1, tense=pres, num=pl] -> 'see' | 'like'

     V[subcat=0, tense=past, num=?n] -> 'disappeared' | 'walked'
     V[subcat=1, tense=past, num=?n] -> 'saw' | 'liked'

When we see a lexical category like `V`:gc:\ [`subcat`:feat: =
`1`:fval:\ ], we can interpret the `subcat`:feat: specification as a
pointer to the rule in which `V`:gc:\ [`subcat`:feat: = `1`:fval:\ ]
is introduced as the head daughter in a `VP`:gc: expansion rule. By
convention, there is a one-to-one correspondence between
`subcat`:feat: values and rules which introduce lexical
heads. Moreover, on this approach, `subcat`:feat: can *only* appear on lexical
categories; it makes no sense, for example, to specify  a
`subcat`:feat: value on `VP`:gc:.

An alternative treatment of subcategorization, due originally to a framework
known as categorial grammar, is represented in feature-based frameworks such as PATR
and Head-driven Phrase Structure Grammar. Rather than using
`subcat`:feat: values as a way of indexing rules, the `subcat`:feat:
value directly encodes the `valency`:dt: of a head, that is, the list of
arguments that it can combine with. For example, a  verb like
`put`:lx: which takes  `NP`:gc: and `PP`:gc: complements (`put the
book on the table`:lx) 
might be represented as subcathpsg0_:

.. _subcathpsg0:
.. ex::  `V`:gc:\ [`subcat`:feat: = `<NP, NP, PP>`:fval:\ ] 

This says that the verb can combine with three  arguments. The
leftmost element in the list is the subject `NP`:gc:, while everything
else |mdash| an `NP`:gc: followed by a `PP`:gc:  in this case |mdash| comprises the
subcategorized-for complements. When a verb like `put`:lx: is combined
with appropriate complements, the requirements which are specified in
the  `subcat`:feat: are discharged, and only a subject `NP`:gc: is
needed. This category, which corresponds to what is traditionally
thought of as `VP`:gc:, might be represented as follows.

.. _subcathpsg1:
.. ex::  `V`:gc:\ [`subcat`:feat: = `<NP>`:fval:\ ] 

Finally, a sentence is a kind of verbal category which has *no*
requirements for further arguments, and hence has a `subcat`:feat:
whose value is the empty list. The tree subcathpsg2_ shows how these
category assigments combine in a parse of `Kim put the book on the table`:lx:.

.. _subcathpsg2:
.. ex::
      .. tree:: (V[subcat=\<\>] (NP Kim)(V[subcat=\<NP\>](V[subcat=\<NP,\ NP,\ VP\>] put)<NP the\ book><PP on\ the\ table>))



Unbounded Dependency Constructions
----------------------------------


--------------------------------
 Adding Compositional Semantics
--------------------------------

Overview
--------

One of the goals of linguistic theory is to provide a systematic
correspondence between form and meaning. One widely adopted approach
to representing meaning |mdash| or at least, some aspects of meaning
|mdash| involves translating expressions of natural language in to
first order logic. From a computational point of view, a strong
argument in favour of first order logic is that it strikes a
reasonable balance between expressiveness and logical
tractability. On the one hand, it is flexible enough to represent many
aspects of the logical structure of natural language. On the other
hand, automated theorem proving for first order logic has received
much attention, and although inference in first order logic is not
decidable, in practice many reasoning problems are efficiently
solvable using modern theorem provers.

Standard textbooks on first order logic often contain exercises in
which the reader is required to translate between English and logic, as illustrated in km_ and wq_.\ [#]_

.. [#] These examples come, respectively, from D. Kalish and R. Montague (1964) *Logic: Techniques of
       Formal Reasoning*, Harcourt, Brace and World, p94, and W. v. Quine (1952) *Methods of Logic*, Routledge and Kegan Paul, p121.


.. _km:
.. ex::

   .. ex:: If all whales are mammals, then Moby Dick is not a fish.

   .. ex:: |forall|\ `x`:math:\ (whale(`x`:math:) |rarr| mammal(`x`:math:)) |rarr| |neg|\ fish(MD)

.. _wq:
.. ex::

   .. ex:: There is a painting that all critics admire.

   .. ex:: |exists|\ `y`:math:\ (painting(`y`:math:) |wedge| |forall|\ `x`:math:\ (critic(`x`:math:) |rarr|  admire(`x`:math:, `y`:math:)))


Although there are numerous subtle and thorny issues about how this
translation should be carried out in particular cases, we will put
these to one side. The main focus of our discussion will be on a
different problem: how can we systematically construct a semantic
representation for a sentence which proceeds in step with the
process of parsing that sentence?


Unfortunately, it is not within the scope of this chapter to introduce the syntax and
semantics of first order logic, so if you don't already have some
familiarity with it, we suggest you consult an appropriate source. 


The |lambda| calculus
---------------------

syntax of |lambda| calculus; functions; |beta| conversion 


Compositionality
----------------

Sample grammar

coordination

quantification and scope


Feature-based Semantics
-----------------------



-----------------
 Further Reading
-----------------

Gerald Gazdar, Ewan Klein, Geoffrey Pullum and Ivan Sag (1985)
*Generalized Phrase Structure Grammar*, Basil Blackwell.

Ivan A. Sag and Thomas Wasow (1999) *Syntactic Theory: A Formal
Introduction*, CSLI Publications.

Patrick Blackburn and Johan Bos
*Representation and Inference for Natural Language: A First Course in
Computational Semantics*, CSLI Publications


---------
Exercises
---------

1. 


.. include:: footer.txt
