.. -*- mode: rst -*-
.. include:: ../definitions.txt
.. sectnum::

=======
Preface
=======

Most human knowledge |mdash| and most human communication |mdash| is
represented and expressed using language.  Language technologies
permit computers to process human language automatically.  Handheld
computers support predictive text and handwriting recognition.  Web
search engines give access to information locked up in unstructured
text.  By providing more natural human-machine interfaces, and more
sophisticated access to stored information, language processing has
come to play a central role in the multilingual information society.

This textbook provides a comprehensive introduction to the field of
natural language processing, covering the major techniques and theories.
The book provides numerous worked examples and exercises, and can
serve as the main text for undergraduate and introductory graduate
courses on natural language processing or computational linguistics.

--------
Audience
--------

This book is intended for people in the language sciences and the
information sciences who want to learn how to write programs that
analyze written language.  No prior knowledge of linguistics or
computer science is assumed.  Readers having a background in either
area can simply skip over some of the discussions.  The distinct
backgrounds and goals lead to a four-way division in the kinds of
skills and knowledge readers will acquire from this book, tabulated
below:


+-----------+--------------------------------+--------------------------------+
|           |                           Background                            |
+ Goals     +--------------------------------+--------------------------------+
|           | Linguistics                    | Computer Science               |
+-----------+--------------------------------+--------------------------------+
| Linguistic| Programming to manage          | Linguistics as a source        |
| Analysis  | linguistic data, explore       | of interesting problems in     |
|           | formal theories, and test      | data modelling, data mining,   |
|           | empirical claims               | and formal language theory     |
+-----------+--------------------------------+--------------------------------+
| Language  | Learning to program with       | Knowledge of linguistics as    |
| Technology| applications to familiar       | fundamental to developing      |
|           | problems, to work in language  | high quality, maintainable     |
|           | technology or other technical  | language processing software   |
|           | field                          |                                |
+-----------+--------------------------------+--------------------------------+

The structure of the book is biased towards linguists in that the
introduction to programming appears in the main chapter sequence, and
other chapters include many elementary examples.  We hope that computer
science readers can quickly skip over such materials til they reach the
content which is more linguistically challenging.

-------------------
What You Will Learn
-------------------

By the time you have dug into the material presented here, you will
have acquired substantial skills and knowledge in the following areas:

* how simple programs can help linguists manipulate and analyze
  language data, and how to write these programs
* how linguistic knowledge is used in important language technology components
* knowledge of the principal data structures and algorithms used in NLP
* understanding of the standard corpora and their use in formal evaluation
* key concepts from linguistic description and analysis
* the organization of the field of NLP
* skills in Python programming for NLP
* skills in algorithmic problem solving, data modelling, and data management

--------------------
Electronic Resources
--------------------

This book accompanies the Natural Language Toolkit.  All software,
corpora, and documentation are freely downloadable from
``http://nltk.sourceforge.net/``.  Distributions are provided for
Windows, Macintosh and Unix platforms.  All NLTK distributions plus
Python and WordNet distributions are also available in the form of an
ISO image which can be downloaded and burnt to CD-ROM for easy local
redistribution.

--------
Emphasis
--------

This book is a **practical** introduction to NLP.  You will learn by
example, write real programs, and grasp the value of being able to
test an idea through implementation.  If you haven't learnt already,
this book will teach you **programming**.  Unlike other programming
books, this one provides illustrations and exercises from NLP.  The
approach we have taken is also **principled**, in that we cover the
theoretical underpinnings and don't shy away from careful linguistic
and computational analysis.  We have tried to be **pragmatic** in
striking a balance between theory and application, and alternate
between the two several times each chapter, identifying the
connections but also the tensions.  Finally, we recognize that you
won't get through this unless it is also **pleasurable**, so we have
tried to include many applications and examples that are interesting
and entertaining, sometimes whimsical.

---------
Structure
---------

Part 1:

* introduces programming in Python
* sequence of chapters about recognising structure in text,
  starting with individual words, identifying parts of speech,
  and simple syntactic constituents
* final chapter of this part, on chunk parsing, can be skipped as
  it is not presumed in later chapters

Part 2:

* another chapter on more Python, as required for subsequent chapters
* focus on trees, grammars, parsing
* last chapter on probabilistic parsing can be skipped

Part 3:

* another chapter on programming
* a series of chapters on advanced topics, with no inter-dependencies
* to be used to fill out a course

Individual chapters have a common structure:

* exercises for each major section
* summary section, further reading
* later sections are sometimes optional (as marked -- how?)

---------
Exercises
---------

* inline examples are exercises
* end of each major section has exercises
* difficulty scheme

NLTK supports assignments of varying difficulty and scope.  In the
simplest assignments, students experiment with existing components to
perform a wide variety of NLP tasks.  This may involve no programming
at all, in the case of the existing demonstrations, or simply changing
a line or two of program code.  As students become more familiar with
the toolkit they can be asked to modify existing components or to
create complete systems out of existing components.  NLTK also
provides students with a flexible framework for advanced projects,
such as developing a multi-component system, by integrating and
extending NLTK components, and adding on entirely new components.
Here NLTK helps by providing standard implementations of all the basic
data structures and algorithms, interfaces to standard corpora,
substantial corpus samples, and a flexible and extensible
architecture.  Thus, as we have seen, NLTK offers a fresh approach to
NLP pedagogy, in which theoretical content is tightly integrated with
application.
    

---------------
For Instructors
---------------

Natural Language Processing (NLP) is often taught within the confines
of a single-semester course at advanced undergraduate level
or postgraduate level.  Unfortunately, it turns out to be rather
difficult to cover both the theoretical and practical sides of the
subject in such a short span of time.  Some courses focus on theory to
the exclusion of practical exercises, and deprive students of the
challenge and excitement of writing programs to automatically process
language.  Other courses are simply designed to teach
programming for linguists, and do not manage to cover any significant
NLP content.  The *Natural Language Toolkit*
was developed to address this problem, making
it feasible to cover a substantial amount of theory and practice
within a single-semester course, even if students have no prior
programming experience.
    
A significant fraction of any NLP syllabus covers fundamental
data structures and algorithms.  These are usually taught with the
help of formal notations and complex diagrams.  Large trees and charts
are copied onto the board and edited in tedious slow motion, or
laboriously prepared for presentation slides.  It is more effective
to use live demonstrations in which those diagrams are generated
and updated automatically.  NLTK provides interactive graphical user
interfaces, making it possible to view program state and to study
program execution step-by-step.  Most NLTK components have a
demonstration mode, and will perform an interesting task without
requiring any special input from the user.  It is even possible to
make minor modifications to programs in response to "what if"
questions.  In this way, students learn the mechanics of NLP quickly,
gain deeper insights into the data structures and algorithms, and
acquire new problem-solving skills.
    
**Relationship to Other NLP Textbooks:**
Once having finished this book, the reader will be ready to proceed
with one of the more advanced NLP textbooks.  Unlike these other textbooks,
this book provides a comprehensive pedagogical framework for students
to learn to program in the context of learning about NLP.

A variety of excellent NLP textbooks are available.  What sets our
materials apart from the others is the tight coupling of the chapters
and exercises with a toolkit, giving students |mdash| even those with no
prior programming experience |mdash| a practical introduction to NLP.
Once completing these materials, students will be ready to attempt
the more advanced textbook
*Foundations of Statistical Natural Language Processing*,
by Manning and Sch√ºtze (MIT Press,
2000).  Two other recent textbooks cover NLP together with speech processing:
*Speech and Language Processing*, by
Jurafsky and Martin (Prentice Hall, 2000),
and *Introducing Speech and Language Processing*
by Coleman (Cambridge, 2005).  While impressive for their
coverage, neither provides a uniform computational framework
so important for newcomers to NLP.
Hammond's book
*Programming for Linguists: Perl for Language Researchers*,
(Blackwell, 2003)
and a Java version, cover elementary programming but do not address NLP.
There are many older textbooks which opened the field to earlier generations of
students; these are mostly of historical interest:
*Natural Language Understanding*
(Allen, Addison Wesley, 1995);
*Statistical Language Learning*
(Charniak, MIT Press, 1993);
*Natural Language Processing for Prolog Programmers*
(Covington, 1993);
*Natural Language Processing in Prolog*
(Gazdar and Mellish, Addison Wesley, 1989);
*Prolog and Natural-Language Analysis*
(Pereira and Shieber, CSLI, 1987);
*Computational Linguistics*
(Grishman, Cambridge, 1986).

**Further Reading:**
The Association for Computational Linguistics (ACL) is the foremost
professional body in NLP.  Its journal and conference proceedings,
approximately 10,000 articles, are available online with a full-text
search interface, via ``http://www.aclweb.org/anthology/``.

SIL Glossary of Linguistic Terms:
http://www.sil.org/linguistics/GlossaryOfLinguisticTerms/

Language Files: Materials for an Introduction to Language and
Linguistics (Eighth Edition), The Ohio State University Department of
Linguistics, http://www.ling.ohio-state.edu/publications/files/

----------------
Acknowledgements
----------------

NLTK was originally created as part of a computational linguistics
course in the Department of Computer and Information Science at the
University of Pennsylvania in 2001.  Since then it has been developed
and expanded with the help of dozens of contributors.  It has now been
adopted in courses in dozens of universities, and serves as the basis
of many research projects.

James Curran: feedback, advice, draft of programming chapter.

Greg Aumann and Stuart Robinson: ``toolbox`` module

-----------------
About the Authors
-----------------

  +------------------+------------------+------------------+
  | |StevenBirdPic|  | |EwanKleinPic|   | |EdwardLoperPic| |
  |                  |                  |                  |
  | Steven Bird      | Ewan Klein       | Edward Loper     |
  +------------------+------------------+------------------+

.. |StevenBirdPic|  image:: ../images/StevenBird.png
                    :scale: 180

.. |EwanKleinPic|   image:: ../images/EwanKlein.png
                    :scale: 120

.. |EdwardLoperPic| image:: ../images/EdwardLoper.png
                    :scale: 100

**Steven Bird** is an Associate Professor in the
Department of Computer Science and Software Engineering
at the University of Melbourne,
and a Senior Research Associate in the
Linguistic Data Consortium
at the University of Pennsylvania.
After completing a PhD at the University of Edinburgh on
computational phonology (1990), Steven moved to Cameroon to
conduct fieldwork on tone and orthography.  Later he spent
four years as Associate Director of the Linguistic Data Consortium
where he developed models and tools for linguistic annotation.
His current research interests are in linguistic databases and
query languages.

**Ewan Klein** is a Professor in the
School of Informatics
at the University of Edinburgh. ...

**Edward Loper** is a doctoral student in the
Department of Computer and Information Sciences
at the University of Pennsylvania. ...

--------------------------------------------------------------------------


.. include:: footer.txt
