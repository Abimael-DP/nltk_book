There are many |NLP| applications where it would be useful to have some
representation of the `meaning`:em: of a natural language
sentence. For instance, current search engine technology
can only take us so far in giving concise and correct answers to many
questions that we might be interested in. Admittedly, Google does a
good job in answering google1a_, since its first hit is google1b_.

.. _google1:
.. ex::

      .. _google1a:
      .. ex:: What is the population of Saudi Arabia?

      .. _google1b:
      .. ex:: Saudi Arabia - Population: 26,417,599

|nopar|
By contrast, the result of sending google2_ to Google is less helpful:

.. _google2:
.. ex:: Which countries border the Mediterranean?

|nopar|
This time, the topmost hit (and the only relevant one in the top ten)
presents the relevant information as a map of the Mediterranean
basin. Since the map is an image file, it is not easy to
extract the required list of countries from the returned page.

Even if Google succeeds in finding documents which contain information
relevant to our question, there is no guarantee that it will be in a
form which can be easily converted into an appropriate answer. One
reason for this is that the information may have to be inferred from more
than one source. This is likely to be the case when we seek an answer
to more complex questions like google3_:

.. _google3:
.. ex:: Which Asian countries border the Mediterranean?

|nopar|
Here, we would probably need to combine the results of two subqueries,
namely google2_ and `Which countries are in Asia?`:lx:.  

The example queries we have just given are based on a paper dating
back to 1982 [Warren1982EEA]_;
this describes a system, *Chat-80*, which converts natural
language questions into a semantic representation, and uses the latter
to retrieve answers from a knowledge base. A knowledge base is usually
taken to be a set of sentences in some formal language; in the case of
Chat-80, it is a set of Prolog clauses. However, we can encode
knowledge in a variety of formats, including relational databases,
various kinds of graph, and first-order models. In |NLTK|, we have
used the third of these options to re-implement a limited version of
Chat-80::

   Sentence: which Asian countries border the_Mediterranean
   ------------------------------
   \x.((contain(asia, x) & country (x)) & border (x, mediterranean)
   set(['turkey', 'syria', 'israel', 'lebanon'])

|nopar| As we will explain later in this chapter, a semantic
representation of the form ``\x.P(x)`` denotes a set of entities
*u* that meet some condition ``P(x)``. We then ask our
knowledge base to enumerate all the entities in this set.

Let's assume more generally that knowledge is available in some
structured fashion, and that it can be interrogated by a suitable
query language. Then the challenge for |NLP| is to find a method for
converting natural language questions into the target query
language. An alternative paradigm for question answering is to take
something like the pages returned by a Google query as our 'knowledge
base' and then to carry out further analysis and processing of the
textual information contained in the returned pages to see whether it does
in fact provide an answer to the question. In either case, it is very
useful to be able to build a semantic representation of questions.
This |NLP| challenge intersects in interesting ways with one of the
key goals of linguistic theory, namely to provide a systematic
correspondence between form and meaning.



While there are numerous subtle and difficult issues about how to
translate natural language constructions into |FOL|, we will largely ignore
these. The main focus of our discussion will be on a
different issue, namely building semantic representations which
conform to some version of the `Principle of Compositionality`:dt:.
(See [Partee1995LSC]_ for this formulation.)

Principle of Compositionality:
   The meaning of a whole is a function of the meanings of the parts
   and of the way they are syntactically combined.


..
    |nopar| There is an assumption here that the semantically relevant
    parts of a complex expression will be determined by a theory of
    syntax. Within this chapter, we will take it for granted that
    expressions are parsed against a context-free grammar. However, this
    is not entailed by the Principle of Compositionality.  To summarize,
    we will be concerned with the task of systematically constructing a
    semantic representation in a manner that can be smoothly integrated
    with the process of parsing.

    The overall framework we are assuming is illustrated in Figure . Given
    a syntactic analysis of a sentence, we can build one or more semantic
    representations for the sentence. Once we have a semantic
    representation, we can also check whether it is true in a model. 

..

    The order of sections in this chapter is not what you might expect
    from looking at the diagram. We will start off in the middle of by
    presenting a logical language that will provide us with
    semantic representations in |NLTK|. Next, we will show how formulas in
    the language can be systematically evaluated in a model. At the end,
    we will bring everything together and describe a simple method for
    constructing semantic representations as part of the parse process in
    |NLTK|.

    This chapter will only scratch the surface of how to carry out
    semantic analysis of natural language, and will be heavily slanted
    towards the approach currently implemented within
    |NLTK|. Consequently, it needs to be read in conjunction with a good
    overall introduction to formal semantics. [Eg., B&B, Gamut, Heim?]


The language of propositional logic represents certain aspects of
natural language, but at a high level of abstraction. The only
structure that is made explicit involves `logical connectives`:dt:\;
these correspond to 'logically interesting' expressions such as
`and`:lx: and `not`:lx:. 

The basic expressions of the language are
`propositional variables`:dt:, usually written `p`:math:, `q`:math:,
`r`:math:, etc. Let `A`:math: be a finite set of such variables. There
is a disjoint set of logical connectives which contains the unary
operator |neg| (`not`:lx:), and binary operators |wedge| (`and`:lx:),
|vee| (`or`:lx:), |rarr| (`implies`:lx:) and |iff| (`iff`:lx:).

The set of formulas of `L`:subscript:`prop` is described inductively:

   1. Every element of `A`:math: is a formula of `L`:subscript:`prop`.

   2. If |phi| is a formula of `L`:subscript:`prop` , then so is |neg| |phi|.

   3. If |phi| and |psi| are formulas, then so are
      (|phi| |wedge| |psi|),
      (|phi| |vee| |psi|),
      (|phi| |rarr| |psi|) and
      (|phi| |iff| |psi|).

   4. Nothing else is a formula of `L`:subscript:`prop`.

|nopar| Within `L`:subscript:`prop`, we can construct formulas such as


.. _prop01:
.. ex:: `p`:math: |rarr| `q`:math: |vee| `r`:math:

There are many sentences of English which could be taken to have the 
logical structure shown in prop01_. Here's an example:

.. _prop02:
.. ex:: If it is raining, then Kim will take an umbrella or Lee will
        get wet. 

In order to explain the relation between prop01_ and prop02_, we need
to give a `key`:em: which maps between propositional variables and
English sentences:

.. _prop03:
.. ex::  `p`:math: stands for  `it is raining`:lx:,
          `q`:math: for `Kim will take an umbrella`:lx: and 
          `q`:math: for `Lee will get wet`:lx:.

The Boolean connectives of propositional logic are supported by the
``sem`` package, and are parsed into various kinds of
``Expression``. We use ``-``, ``&``, ``|``, ``->``, ``<->`` to stand,
respectively, for `not`:lx:, `and`:lx:, `or`:lx:, `implies`:lx: and
`iff`:lx:. 

As the name suggests, propositional logic only studies the logical
structure of formulas made up of atomic propositions. We saw, for
example, that propositional variables stood for whole clauses in
English. In order to look at how predicates combine with arguments, we
need to look at a more complex language for semantic representation,
namely |fol|. In order to show how this new language interacts with
the |lambda|-calculus, it will be useful to introduce the notion of
types into our syntactic definition, in departure from the rather
simple approach to defining the clauses of `L`:subscript:`prop`.


The keys of the dictionary (sorted alphabetically) can also be
accessed via the property ``symbols``:

    >>> val1.symbols
    ['p', 'q', 'r']

There is an alternative
approach in which predication is treated as function application.  In
this functional style of representation, `Adam sees Betty`:lx: can be
formalized as `see(a)(b)`:mathit:. That is, rather than being modeled as a
relation, `see`:mathit: denotes a function which applies to one argument to
yield a new function that is then applied to the second argument. In
NLTK, we will in fact treat predications syntactically as function
applications, but we use a concrete syntax that allows them to
represented as `n`:math:-ary relations.