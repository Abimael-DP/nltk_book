.. -*- mode: rst -*-
.. include:: ../definitions.txt

.. standard global imports

    >>> import nltk, re, pprint

.. _chap-semantics:

=====================
12. Logical Semantics
=====================

.. NB chapter structure isn't consistent with rest of book, re exercise subsections.

------------
Introduction
------------

There are many |NLP| applications where it would be useful to have some
representation of the `meaning`:em: of a natural language
sentence. For instance, as
we pointed out in Chapter chap-introduction_, current search engine technology
can only take us so far in giving concise and correct answers to many
questions that we might be interested in. Admittedly, Google does a
good job in answering google1a_, since its first hit is google1b_.

.. _google1:
.. ex::
      
      .. _google1a:
      .. ex:: What is the population of Saudi Arabia?

      .. _google1b:
      .. ex:: Saudi Arabia - Population: 26,417,599

|nopar|
By contrast, the result of sending google2_ to Google is less helpful:

.. _google2:
.. ex:: Which countries border the Mediterranean?

|nopar|
This time, the topmost hit (and the only relevant one in the top ten)
presents the relevant information as a map of the Mediterranean
basin. Since the map is an image file, it is not easy to
extract the required list of countries from the returned page.

Even if Google succeeds in finding documents which contain information
relevant to our question, there is no guarantee that it will be in a
form which can be easily converted into an appropriate answer. One
reason for this is that the information may have to be inferred from more
than one source. This is likely to be the case when we seek an answer
to more complex questions like google3_:

.. _google3:
.. ex:: Which Asian countries border the Mediterranean?

|nopar|
Here, we would probably need to combine the results of two subqueries,
namely google2_ and `Which countries are in Asia?`:lx:.  

The example queries we have just given are based on a paper dating
back to 1982 [Warren1982EEA]_;
this describes a system, *Chat-80*, which converts natural
language questions into a semantic representation, and uses the latter
to retrieve answers from a knowledge base. A knowledge base is usually
taken to be a set of sentences in some formal language; in the case of
Chat-80, it is a set of Prolog clauses. However, we can encode
knowledge in a variety of formats, including relational databases,
various kinds of graph, and first-order models. In |NLTK|, we have
used the third of these options to re-implement a limited version of
Chat-80::

   Sentence: which Asian countries border the_Mediterranean
   ------------------------------
   \x.((contain(asia, x) & country (x)) & border (x, mediterranean)
   set(['turkey', 'syria', 'israel', 'lebanon'])

|nopar| As we will explain later in this chapter, a semantic
representation of the form ``\x.P(x)`` denotes a set of entities
*u* that meet some condition ``P(x)``. We then ask our
knowledge base to enumerate all the entities in this set.

Let's assume more generally that knowledge is available in some
structured fashion, and that it can be interrogated by a suitable
query language. Then the challenge for |NLP| is to find a method for
converting natural language questions into the target query
language. An alternative paradigm for question answering is to take
something like the pages returned by a Google query as our 'knowledge
base' and then to carry out further analysis and processing of the
textual information contained in the returned pages to see whether it does
in fact provide an answer to the question. In either case, it is very
useful to be able to build a semantic representation of questions.
This |NLP| challenge intersects in interesting ways with one of the
key goals of linguistic theory, namely to provide a systematic
correspondence between form and meaning.

A widely adopted approach to representing meaning |mdash| or at least,
some aspects of meaning |mdash| involves translating expressions of
natural language into |fol| (|FOL|). From a computational point of
view, a strong argument in favor of |FOL| is that it strikes a
reasonable balance between expressiveness and logical tractability. On
the one hand, it is flexible enough to represent many aspects of the
logical structure of natural language. On the other hand, automated
theorem proving for |FOL| has been well studied, and although
inference in |FOL| is not decidable, in practice many reasoning
problems are efficiently solvable using modern theorem provers
(cf. [Blackburn2005RIN]_ for discussion).

While there are numerous subtle and difficult issues about how to
translate natural language constructions into |FOL|, we will largely ignore
these. The main focus of our discussion will be on a
different issue, namely building semantic representations which
conform to some version of the `Principle of Compositionality`:dt:.
(See [Partee1995LSC]_ for this formulation.)

Principle of Compositionality:
   The meaning of a whole is a function of the meanings of the parts
   and of the way they are syntactically combined.

|nopar| There is an assumption here that the semantically relevant
parts of a complex expression will be determined by a theory of
syntax. Within this chapter, we will take it for granted that
expressions are parsed against a context-free grammar. However, this
is not entailed by the Principle of Compositionality.  To summarize,
we will be concerned with the task of systematically constructing a
semantic representation in a manner that can be smoothly integrated
with the process of parsing.

The overall framework we are assuming is illustrated in Figure semint_. Given
a syntactic analysis of a sentence, we can build one or more semantic
representations for the sentence. Once we have a semantic
representation, we can also check whether it is true in a model. 

.. _semint:
.. ex::
   .. image:: ../images/semint.png
      :scale: 30

|nopar| A `model`:dt: for a logical language is a set-theoretic
construction which provides a very simplified picture of how the world
is. For example, in this case, the model should contain individuals
(indicated in the diagram by small dots) corresponding to Suzie and
Fido, and it should also specify that these individuals belong to
the `chase`:math: relation.

The order of sections in this chapter is not what you might expect
from looking at the diagram. We will start off in the middle of semint_ by
presenting a logical language that will provide us with
semantic representations in |NLTK|. Next, we will show how formulas in
the language can be systematically evaluated in a model. At the end,
we will bring everything together and describe a simple method for
constructing semantic representations as part of the parse process in
|NLTK|.

..
   This chapter will only scratch the surface of how to carry out
   semantic analysis of natural language, and will be heavily slanted
   towards the approach currently implemented within
   |NLTK|. Consequently, it needs to be read in conjunction with a good
   overall introduction to formal semantics. [Eg., B&B, Gamut, Heim?]

--------------------
Propositional  Logic
--------------------

The language of propositional logic represents certain aspects of
natural language, but at a high level of abstraction. The only
structure that is made explicit involves `logical connectives`:dt:\;
these correspond to 'logically interesting' expressions such as
`and`:lx: and `not`:lx:. The basic expressions of the language are
`propositional variables`:dt:, usually written `p`:math:, `q`:math:,
`r`:math:, etc. Let `A`:math: be a finite set of such variables. There
is a disjoint set of logical connectives which contains the unary
operator |neg| (`not`:lx:), and binary operators |wedge| (`and`:lx:),
|vee| (`or`:lx:), |rarr| (`implies`:lx:) and |iff| (`iff`:lx:).

The set of formulas of `L`:subscript:`prop` is described inductively:

   1. Every element of `A`:math: is a formula of `L`:subscript:`prop`.

   2. If |phi| is a formula of `L`:subscript:`prop` , then so is |neg| |phi|.

   3. If |phi| and |psi| are formulas, then so are
      (|phi| |wedge| |psi|),
      (|phi| |vee| |psi|),
      (|phi| |rarr| |psi|) and
      (|phi| |iff| |psi|).

   4. Nothing else is a formula of `L`:subscript:`prop`.

|nopar| Within `L`:subscript:`prop`, we can construct formulas such as

.. _prop01:
.. ex:: `p`:math: |rarr| `q`:math: |vee| `r`:math:

There are many sentences of English which could be taken to have the 
logical structure shown in prop01_. Here's an example:

.. _prop02:
.. ex:: If it is raining, then Kim will take an umbrella or Lee will
        get wet. 

In order to explain the relation between prop01_ and prop02_, we need
to give a `key`:em: which maps between propositional variables and
English sentences:

.. _prop03:
.. ex::  `p`:math: stands for  `it is raining`:lx:,
          `q`:math: for `Kim will take an umbrella`:lx: and 
          `q`:math: for `Lee will get wet`:lx:.


The Boolean connectives of propositional logic are supported by the
``sem`` package, and are parsed into various kinds of
``Expression``. We use ``-``, ``&``, ``|``, ``->``, ``<->`` to stand,
respectively, for `not`:lx:, `and`:lx:, `or`:lx:, `implies`:lx: and
`iff`:lx:. In the following example, we start off by creating a new
instance ``lp`` of the NLTK ``LogicParser()``.

   >>> lp = nltk.LogicParser()
   >>> lp.parse('-(p & q)')
   <NegatedExpression -(p & q)>
   >>> lp.parse('p & q')
   <AndExpression (p & q)>
   >>> lp.parse('p | (r -> q)')
   <OrExpression (p | (r -> q))>
   >>> lp.parse('p <-> -- p')
   <IffExpression (p <-> --p)>
   

As the name suggests, propositional logic only studies the logical
structure of formulas made up of atomic propositions. We saw, for
example, that propositional variables stood for whole clauses in
English. In order to look at how predicates combine with arguments, we
need to look at a more complex language for semantic representation,
namely |fol|. In order to show how this new language interacts with
the |lambda|-calculus, it will be useful to introduce the notion of
types into our syntactic definition, in departure from the rather
simple approach to defining the clauses of `L`:subscript:`prop`.

In the general case, we interpret sentences of a logical language
relative to a model, which is a very simplified version of the
world. A model for propositional logic needs to assign the values
``True`` or ``False`` to every possible formula. We do this
inductively: first, every propositional variable is assigned a value,
and then we compute the value of complex formulas by consulting the
meanings of the Boolean connectives and applying them to the values of
the formula's components. Let's create a valuation:

    >>> val1 = nltk.sem.Valuation([('p', True), ('q', True), ('r', False)])
    
A ``Valuation`` object is essentially just a dictionary that maps
logical expressions (treated as strings) to appropriate values.

   >>> val1['p']
   True

The keys of the dictionary (sorted alphabetically) can also be
accessed via the property ``symbols``:

    >>> val1.symbols
    ['p', 'q', 'r']

As we will see later, our models need to be somewhat more complicated
in order to handle the more complicated expressions discussed in the
next section, so for the time being, just ignore the ``dom1`` and
``g1`` variables in the following declarations.

    >>> dom1 = set([])
    >>> g1 = nltk.sem.Assignment(dom1)

Now, let's create a model ``m that uses ``val1``:

    >>> m1 = nltk.sem.Model(dom1, val1, prop=True)

The ``prop=True`` is just a flag to say that our models are intended
for propositional logic.

Every instance of Model defines appropriate truth functions for the
Boolean connectives (and in fact they are implemented as functions).
 
    >>> m1.AND
    <bound method Model.AND of (set([]), {'q': True, 'p': True, 'r': False})>

We can use these functions to create truth tables:

    >>> for first in [True, False]:
    ...     for second in [True, False]:
    ...	        print "%s %s => %s" % (first, second, m1.AND(first, second))
    True True => True
    True False => False
    False True => False
    False False => False


-----------------
First-Order Logic
-----------------

Predication
-----------

In |fol| (|FOL|), propositions are analyzed into predicates
and arguments, which takes us a step closer to the structure of
natural languages. The standard construction rules for |FOL| recognize
`terms`:dt: such as individual variables and individual constants, and
`predicates`:dt: which take differing numbers of arguments. For
example, `Jane walks`:lx: might be formalized as `walk(jane)`:mathit:
and `Jane sees Mike`:lx: as  `see(jane, mike)`:mathit:. We will call
`walk`:mathit: a `unary predicate`:dt:, and `see`:mathit: 
a `binary predicate`:dt:. Semantically,
`see`:mathit: is modeled as a relation, i.e., a set of
pairs, and the proposition is true in a situation just in case the
pair |langle|\ `j, m`:math:\ |rangle| belongs to this set. In order to
make it explicit that we are treating `see`:lx: as a relation, we'll
use the symbol |seeR| as its semantic representation, and we'll call
|seeR|\ `(jane, mike)`:mathit: an instance of the
'relational style' of representing predication.

---------------
Further Reading
---------------

For more examples of semantic analysis with |NLTK|, please see the
guides at
``http://nltk.org/doc/guides/sem.html`` and
``http://nltk.org/doc/guides/logic.html``.

The use of characteristic functions for interpreting expressions of
natural language was primarily due to Richard
Montague. [Dowty1981IMS]_ gives a comprehensive and reasonably
approachable introduction to Montague's grammatical framework.

A more recent and wide-reaching study of the use of a |lambda| based
approach to natural language can be found in [Carpenter1997TLS]_.

[Heim1998SGG]_ is a thorough application of formal semantics to
transformational grammars in the Government-Binding model.

[Blackburn2005RIN]_ is the first textbook devoted to computational
semantics, and provides an excellent introduction to the area.

.. include:: footer.txt
