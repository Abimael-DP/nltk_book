<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"../../docbook/sgml/docbook/xml-dtd-4.2/docbookx.dtd" [
<!-- Base URL for the reference & tutorial documentation -->
<!ENTITY refdoc "../../api/public">
<!ENTITY tutdoc "..">

<!-- Index -->
<!ENTITY index SYSTEM "index.xml">

<!-- Copyright & License -->
<!ENTITY copyright SYSTEM "../copyright.xml">

<!-- Prompts for Python code samples -->
<!ENTITY prompt "<prompt>&gt;</prompt><prompt>&gt;</prompt><prompt>&gt;</prompt>">
<!ENTITY prompt2 "<prompt>...</prompt>">
]>

<article>
  <articleinfo>
    <author><firstname>Edward</firstname><surname>Loper</surname></author>
    <authorinitials>edl</authorinitials>
    <author><firstname>Steven</firstname><surname>Bird</surname></author>
    <authorinitials>sb</authorinitials>
    <title>NLTK Tutorial: Introduction to Natural Language Processing in Python</title>
    &copyright;
  </articleinfo>

  <section id="goals">
    <title> Goals </title>

    <para> The Natural Language Toolkit (NLTK) defines a basic
    infrastructure that can be used to build NLP programs in Python.
    It provides: </para>

    <itemizedlist>
      <listitem><para>Basic classes for representing data relevant to
      natural language processing.</para>
      </listitem>
      <listitem><para>Standard interfaces for performing tasks, such
      as tokenization, tagging, and parsing.</para>
      </listitem>
      <listitem><para>Standard implementations for each task, which
      can be combined to solve complex problems.</para>
      </listitem>
    </itemizedlist>

    <para> This tutorial introduces natural language processing in Python,
      NLTK, and the <literal>nltk.token</literal> module. </para>

  </section> <!-- Goals -->

  <section id="overview">
    <title> Overview of NLTK </title>

    <para>NLTK provides basic classes for representing data relevant to NLP.
    NLTK also provides standard interfaces for performing NLP tasks, along
    with standard implementations of each task.</para>

    <para>NLTK is organized into a collection of task-specific modules and
    packages.  Each contains data-oriented classes to represent NLP information,
    and task-oriented classes to encapsulate the resources and methods needed
    to perform a particular task.</para>

    <para>NLTK has the following modules:

<itemizedlist>
<listitem><para>token: classes for representing and processing
  individual elements of text, such as words and
  sentences
</para></listitem>

<listitem><para>probability: classess for representing and processing
  probabilistic information.
</para></listitem>

<listitem><para>tree: classes for representing and processing hierarchical
information over text.
</para></listitem>

<listitem><para>cfg: classes for representing and processing context
free grammars.</para></listitem>

<listitem><para>fsa: finite state automata</para></listitem>

<listitem><para>tagger: tagging each word with a part-of-speech, a sense, etc
</para></listitem>

<listitem><para>parser: building trees over text (includes chart, chunk and
  probabilistic parsers)
</para></listitem>

<listitem><para>classifier: classify text into categories
  (includes feature, featureSelection, maxent, naivebayes</para></listitem>

<listitem><para>draw: visualize NLP structures and processes</para></listitem>

<listitem><para>corpus: access (tagged) corpus data</para></listitem>
</itemizedlist>
    </para>

  </section> <!-- overview -->

  <section id="python">
    <title> Python Overview </title>

    <para> Introduction to processing lists and strings. </para>

    <para> First, list initialization, length, indexing, slicing: </para>

<programlisting>
&prompt;<command>a = ['colourless', 'green', 'ideas']</command>
&prompt;<command>print a</command>
['colourless', 'green', 'ideas']
&prompt;<command>a</command>
['colourless', 'green', 'ideas']
&prompt;<command>len(a)</command>
3
&prompt;<command>a[1]</command>
'green'
&prompt;<command>a[-1]</command>
'ideas'
&prompt;<command>a[1:]</command>
['green', 'ideas']
</programlisting>

    <para> Note that we had to explicitly print the result of the
      assignment above, using <literal>print a</literal>.  We achieved
      the same result by giving the variable name, which Python evaluates
      and prints.  (For conciseness we henceforth omit these print statements.)
      Below we see use of list concatenation, sorting and reversal.  The final
      command concatenates two list elements.
    </para>

<programlisting>
&prompt;<command>b = a + ['sleep', 'furiously']</command>
['colourless', 'green', 'ideas', 'sleep', 'furiously']
&prompt;<command>b.sort()</command>
['colourless', 'furiously', 'green', 'ideas', 'sleep']
&prompt;<command>b.reverse()</command>
['sleep', 'ideas', 'green', 'furiously', 'colourless']
&prompt;<command>b[2] + b[1]</command>
'greenideas'
</programlisting>

    <para> Simple for loop: </para>

<programlisting>
&prompt;<command>for w in b:</command>
&prompt2;<command>    print w[0]</command>
&prompt2;<command></command>
's'
'i'
'g'
'f'
'c'
</programlisting>

    <para> Miscellaneous further interesting examples:</para>

<programlisting>
&prompt;<command>b[2][1]</command>
'r'
&prompt;<command>b.index('green')</command>
2
&prompt;<command>b[5]</command>
IndexError: list index out of range
&prompt;<command>b[0] * 3</command>
'sleepsleepsleep'
&prompt;<command>c = ' '.join(b)</command>
'sleep ideas green furiously colourless'
&prompt;<command>c.split('r')</command>
['sleep ideas g', 'een fu', 'iously colou', 'less']
&prompt;<command>map(lambda x: len(x), b)</command>
[5, 5, 5, 9, 10]
&prompt;<command>[(x, len(x)) for x in b]</command>
[('sleep', 5), ('ideas', 5), ('green', 5), ('furiously', 9), ('colourless', 10)]
</programlisting>

    <para> Next we'll take a look at Python ``dictionaries'' (or associative arrays). </para>

<programlisting>
&prompt;<command>d = {}</command>
&prompt;<command>d['colourless'] = 'adj'</command>
&prompt;<command>d['furiously'] = 'adv'</command>
&prompt;<command>d['ideas'] = 'n'</command>
&prompt;<command>d.keys()</command>
['colourless', 'furiously', 'ideas']
&prompt;<command>d.values()</command>
['adv', 'adj', 'n']
&prompt;<command>d</command>
{'furiously': 'adv', 'colourless': 'adj', 'ideas': 'n'}
&prompt;<command>d.has_key('ideas')</command>
1
&prompt;<command>d.get('sleep')</command>
None
&prompt;<command>for w in d.keys():</command>
&prompt2;<command>    print "%s [%s]," % (w, d[w]),</command>
furiously [adv], colourless [adj], ideas [n],
</programlisting>

    <para> Finally, we look at Python's regular expression module, for
    substituting and searching within strings. </para>

<programlisting>
&prompt;<command>import re</command>
&prompt;<command>s = "colourless green ideas sleep furiously"</command>
&prompt;<command>re.sub('l', 's', s)</command>
'cosoursess green ideas sseep furioussy'
&prompt;<command>re.sub('green', 'red', s)</command>
'colourless red ideas sleep furiously'
&prompt;<command>re.findall('[^aeiou][aeiou]', s)</command>
['co', 'lo', 'le', 're', ' i', 'de', 'le', 'fu', 'ri']
&prompt;<command>re.findall('([^aeiou])([aeiou])', s)</command>
[('c', 'o'), ('l', 'o'), ('l', 'e'), ('r', 'e'), (' ', 'i'), ('d', 'e'),
('l', 'e'), ('f', 'u'), ('r', 'i')]
&prompt;<command>re.findall('(.).\bs 1', s)</command>
['o', 's']
</programlisting>

  </section>


  <section id="accessing">
    <title> Accessing NLTK </title>

    <para> NLTK consists of a set of Python
    <glossterm>modules</glossterm>, each of which defines classes and
    functions related to a single data structure or task.  Before you
    can use a module, you must <glossterm>import</glossterm> its
    contents.  The simplest way to import the contents of a module is
    to use the
    "<literal>from&nbsp;<replaceable>module</replaceable>&nbsp;import&nbsp;*</literal>"
    command.  For example, to import the contents of the
    <literal>nltk.token</literal> module, which is discussed in this
    tutorial, type: </para>

<programlisting>
&prompt;<command> from nltk.token import *</command>
</programlisting>
    
    <para> A disadvantage of the
    "<literal>from&nbsp;<replaceable>module</replaceable>&nbsp;import&nbsp;*</literal>" command is
    that it does not specify what objects are imported; and it is
    possible that some of the import objects will unintentionally
    cause conflicts.  To avoid this disadvantage, you can explicitly
    list the objects you wish to import.  For example, to import the
    <literal>Token</literal> and <literal>Location</literal> classes
    from the <literal>nltk.token</literal> module, type: </para>

<programlisting>
&prompt;<command> from nltk.token import Token, CharSpanLocation</command>
</programlisting>

    <para> Another option is to import the module itself, rather than
    its contents.  For example, to import the
    <literal>nltk.token</literal> module, type: </para>

<programlisting>
&prompt;<command> import nltk.token</command>
</programlisting>

    <para> Once a module is imported, its contents can then be accessed
    using fully qualified dotted names: </para>

<programlisting>
&prompt;<command> nltk.token.Token(TEXT='dog')</command>
'dog'@[?]
&prompt;<command> nltk.token.Location(3,5,source='source.txt')</command>
@[3:5]
</programlisting>

    <para> For more information about importing, see any Python
    textbook. </para>

    <para> [ PARAGRAPH ON ACCESSING CORPUS DATA USING CORPUS MODULE ] </para>

  </section> <!-- Accessing NLTK -->

  <section id="tour">
    <title> A Tour of NLTK Modules </title>

    <para>[To be written]</para>
  </section> <!-- tour -->

<section> <title>NLTK Interfaces</title>

<para> <literal>TokenizerI</literal> is the first "interface"
      class we've encountered; at this point, we'll take a short
      digression to explain how interfaces are implemented in
      NLTK. </para>

<para> An <glossterm>interface</glossterm> gives a partial
      specification of the behavior of a class, including
      specifications for methods that the class should implement.  For
      example, a "comparable" interface might specify that a class
      must implement a comparison method.  Interfaces do not give a
      complete specification of a class; they only specify a minimum
      set of methods and behaviors which should be implemented by the
      class.  For example, the <literal>TokenizerI</literal> interface
      specifies that a tokenizer class must implement a
      <literal>tokenize</literal> method, which takes a
      <literal>string</literal>, and returns a list of
      <literal>Token</literal>s; but it does not specify what other
      methods the class should implement (if any).  </para>

<para> The notion of "interfaces" can be very useful in ensuring
      that different classes work together correctly.  Although the
      concept of "interfaces" is supported in many languages, such as
      Java, there is no native support for interfaces in
      Python. </para>

<para> NLTK therefore implements interfaces using classes, all
      of whose methods raise the
      <literal>NotImplementedError</literal> exception.  To
      distinguish interfaces from other classes, they are always named
      with a trailing "<literal>I</literal>".  If a class implements
      an interface, then it should be a subclass of the interface.
      For example, the <literal>WSTokenizer</literal> class implements
      the <literal>TokenizerI</literal> interface, and so it is a
      subclass of <literal>TokenizerI</literal>.  </para>

</section> <!-- NLTK Interfaces -->

&index;
</article>


