<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.3//EN" "/usr/lib/sgml/dtd/docbook-xml/docbookx.dtd" [
<!ENTITY prompt "<prompt>&gt;&gt;&gt;</prompt>">
]>

<article>
  <artheader>
    <author><firstname>Edward</firstname><surname>Loper</surname></author>
    <authorinitials>edl</authorinitials>
    <title>Tutorial: Probability</title>
  </artheader>

  <!--  adf -->
  <section> <title> Experiments and Samples </title>

    <para> The <literal>nltk.probability</literal> module can be used
    to model probablistic phenomena.  Most probablistic phenomena can
    be thought of as experiments.  An
    <glossterm>experiment</glossterm> is any process which leads to a
    well-defined outcome.  For example, rolling a die is an experiment
    whose possible outcomes are 1, 2, 3, 4, 5, and 6.
    </para>

    
    <para> A <glossterm>sample</glossterm> is any possible outcome of
    a given experiment.  In <literal>nltk.probability</literal>,
    almost any Python value or object can be a sample

    <footnote><para>Samples must be immutable objects; and can not be
    Events.  See ?? for more information </para></footnote>.

    Typical samples are strings, integers, Tokens, and tuples.  We can
    define a simple Python procedure which defines the experiment of
    rolling a die; its samples are 1, 2, 3, 4, 5, and 6:
    </para>

<screen>
    &prompt;<command> import random</command>
    &prompt;<command> def roll():</command>
    <prompt>...</prompt><command>     return random.choice( [1, 2, 3, 4, 5, 6] )</command>
    &prompt;<command> roll()</command>
    4
</screen>

  </section>
  <section> <title>Events</title>

    <para> An event is a set of samples.  For example, the set of all
    even die outcomes is an event.  Events are written using standard
    set notation: 

<screen>
    {1, 2, 3, 6}        <comment>The event containing samples 1, 2, 3, and 6</comment>
    {x: x&lt;3}            <comment>The event containing all samples that are less than 3</comment>
    {x: x is even}      <comment>The event containing all even samples</comment>
</screen>

    Events usually contain more than one sample; but sometimes they
    will contain ony one sample, or will contain no samples at all.
    </para>

    <section> <title> Simple Events </title>
    
      <para> The <literal>nltk.probability</literal> module defines a
      collection of <literal>Event</literal> classes for representing
      events in different ways.  Events are used throughout the
      <literal>probability</literal> module to define and maniuplate
      probability distributions.  The simplest types of event are
      <literal>SampleEvent</literal>s, which just consist of a single
      sample:

<screen>
    &prompt;<command> SampleEvent(3)</command>
    {3}
    &prompt;<command> SampleEvent('dog')</command>
    {'dog'}
</screen>
      </para>
      
      <para> Events can also be defined in terms of
      <literal>Set</literal>s, using the <literal>SetEvent</literal>
      class:

<screen>
    &prompt;<command> SetEvent( Set(1, 3, 5) )</command>
    {3, 1, 5}
    &prompt;<command> SetEvent( Set(1, 12) | Set(5, 7) )</command>
    {5, 1, 12, 7}
</screen>
      </para>
      
      <para> <literal>NullEvent</literal> is used to represent the
      event containing no samples; and
      <literal>UniversalEvent</literal> is used to represent the event
      containing all samples:

<screen>
    &prompt;<command> NullEvent()</command>
    {}
    &prompt;<command> UniversalEvent()</command>
    {x}
</screen>

      The <literal>UniversalEvent</literal> is different from all the
      other types of events we have seen, since it can contain an
      infinite set of samples.  For example, for an experiment that
      can generate any integer as an outcome,
      <literal>UniversalEvent</literal> contains the set of all
      integers. </para>

    </section>

    <section> <title> Using Events</title>

      <para> (insert text here) </para>
      
    </section>
      
    <section> <title> Predicated Events</title>
      
      <para> Predicated events are events defined in terms of a
      <glossterm>predicate</glossterm>, or a function that tests
      whether a sample is contained in the event.  Examples of
      predicated events are:

<screen>
    {x: x&gt;8}            <comment>The event containing all samples that are greater than 8</comment>
    {x: x is odd}       <comment>The event containing all odd samples</comment>
</screen>

      The first event's predicate tests whether a sample is greater
      than x.  The second event's predicate tests whether x is odd.
      In both cases, the events contains all samples that make their
      predicate true. </para>

      <para> Predicated events are constructed using the
      <literal>PredEvent</literal> class:

<screen>
    &prompt;<command> def gt8(x): return x>8</command>        <comment>Define an function to test</comment>
                                      <comment>if a sample is greater than 8</comment>
    &prompt;<command> def odd(x): return x%2 == 1</command>   <comment>Define an "odd" function</comment>
    &prompt;<command> oddEvent = PredEvent(odd)</command>
    {x: odd(x)}
    &prompt; <command>233 in oddEvent</command>
    &prompt; 104 in oddEvent
    0
    &prompt;<command> gt8Event = PredEvent(gt8)</command>
    {x: gt8(odd)}
    &prompt;<command> 10 in gt8Event</command>
    1
    &prompt;<command> 5 in gt8Event</command>
    0
</screen>
      </para>

      <para>
The predicate can be any
      function that 


      <literal>PredEvent</literal>s are the most flexible type of
      event.  Like <literal>UniversalEvent</literal>, they can be used
      to define infinite events.

<literal>FuncEvent</literal>s are the most flexible type of
    event.  Like <literal>UniversalEvent</literal>, they can be used
    to define infinite events.
</para>
    </section>
    
  </section>
</article>
