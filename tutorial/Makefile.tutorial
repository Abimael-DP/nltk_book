# Natural Language Toolkit: Tutorial Report Master Makefile
#
# Copyright (C) 2001 University of Pennsylvania
# Author: Edward Loper <edloper@gradient.cis.upenn.edu>
# URL: <http://nltk.sf.net>
# For license information, see LICENSE.TXT
#
# $Id$
#
# This makefile is imported by the makefiles in each tutorial; it
# defines rules for building the tutorials from docbook, and for
# converting images to appropriate formats.  It also defines some
# standard make targets: help, all, clean, html, pdf, and ps.
#

##############################################
##  Images used by the tutorial.
##  Currently, only *.gif, *.ps, and *.dot images are supported.
IMAGES = $(wildcard images/*.gif) $(wildcard images/*.ps) \
	 $(wildcard images/*.dot)

##############################################
##  Programs; change these if necessary.

# DSSSL processors (for reading/converting docbook)
JADE = jade
JADETEX = jadetex
PDFJADETEX = pdfjadetex

# Perl and Python, for creating the index.
PERL = perl
PYTHON = python

## Latex format files.  Used by ps (?).  I'm commenting these out
## for now, becaues they don't work for me.
#JTFMT = -fmt=/usr/share/texmf/web2c/jadetex
#PJTFMT = -fmt=/usr/share/texmf/web2c/pdfjadetex

##############################################
##  Image conversion programs
# From ImageMagick.  Using version 5.4.4
CONVERT = convert
# From AT&T GraphViz.  Using dot version 1.7.16
DOT = dot -Nfontsize=18 -Efontsize=18
# Perl script by Roland Bless.  Using version 1.47 (see note below)
PS2EPS = ps2eps -q
# From Ghostscript.  Using version 7.07
PS2PDF = ps2pdf
# From netpbm.  Using version 9.20
GIFTOPNM = giftopnm
# From netpbm.  Using version 9.20
PNMTOPNG = pnmtopng
# From netpbm.  Using version 9.20
PBMTOEPSI = pbmtoepsi
# From netpbm.  Using version 9.20
PNMTOPS = pnmtops

# I installed ps2eps from:
# <http://www.telematik.informatik.uni-karlsruhe.de/~bless/ps2eps.html>
# I'm using ps2eps instead of ps2epsi, because my local version of
# ps2epsi appears to be broken; and because ps2eps claims to be more
# robust.

##############################################
##  Other variables (You shouldn't need to change these)

# Transformed images.
IMAGE_BASENAMES := $(basename $(IMAGES))
EPS_IMAGES := $(IMAGE_BASENAMES:=.eps) # Image format for HTML output
PNG_IMAGES := $(IMAGE_BASENAMES:=.png) # Image format for PDF output

# DSSSL sheets
XML_DECL = ../../docbook/xml.dcl
DOCBOOK_DSSSL = ../../docbook/docbook-utils.dsl
HTML_DSSSL = $(DOCBOOK_DSSSL)\#html
PRINT_DSSSL = $(DOCBOOK_DSSSL)\#print
DOCBOOK_CATALOG = ../../docbook/catalog

# Copyright/License entity
COPYRIGHT = ../copyright.xml

# Index creation
COLLATEINDEX = ../../docbook/collateindex.pl
INDEX_GLOSSTERMS = ../../docbook/index_glossterms.py

# Example colorization
COLORIZE_DOCTESTS = ../../../src/colorize_doctests.py

# Input file
DOCBOOK = $(REPORT).xml
COLORIZED_DOCBOOK = $(REPORT).colorized.xml
INDEXED_DOCBOOK = $(REPORT).indexed.xml

# Output directory
HTML_DIR = $(REPORT)

# Output files.
HTML_NOCHUNKS = $(HTML_DIR)/nochunks.html
HTML_CHUNKS = $(HTML_DIR)/index.html
PDF = $(REPORT).pdf
PS = $(REPORT).ps
PS2 = $(REPORT).ps2
TEX = $(REPORT).tex

# Intermediate files.
LOG = $(REPORT).log
AUX = $(REPORT).aux
DVI = $(REPORT).dvi
TEMP = $(REPORT).temp
OUT = $(REPORT).out

# Use the file "html/images.up2date" to keep track of whether the HTML
# images have been copied to the HTML directory.  The "if" expression
# checks whether there are any images; if not, then don't bother
# thrying to copy them.
HTML_IMAGES = $(if $(strip $(IMAGES)), $(HTML_DIR)/images/.up2date)

##############################################
##  Declare which targets are not files.
.PHONY: help usage all clean html pdf ps 

##############################################
## Notes on make targets:
##
## Unfortunately, (open)jade doesn't let us specify an output directory
## for the html stylesheets; so we have to do some acrobatics: change
## directory into the desired directory; then use ../ to fix up the
## relative paths.
##
## I also use '||' do clean up in some places.  "A||B" means "do A; and
## if that fails, then do B.  This is important, e.g., to keep
## index.xml from thinking that it succeeded if only the first call to
## collateindex succeeded.

##############################################
##  Basic Build targets

help: usage
usage:
	@echo "Usage:"
	@echo "    make all         -- Build HTML & PDF output"
	@echo "    make html        -- Build HTML output"
	@echo "    make pdf         -- Build PDF output"
	@echo "    make ps          -- Build Postscript output"
	@echo "    make dvi         -- Build DVI output"
	@echo "    make clean       -- Remove all built files"

all: index.xml html pdf
clean:
	rm -rf $(HTML_DIR)
	rm -f $(PDF) $(AUX) $(OUT) 
	rm -f $(LOG) $(TEX) $(TEMP)
	rm -f $(INDEXED_DOCBOOK) index.xml $(PNG_IMAGES) $(EPS_IMAGES)

##############################################
##  Index creation
$(COLORIZED_DOCBOOK): $(DOCBOOK)
	$(PYTHON) $(COLORIZE_DOCTESTS) $(DOCBOOK) $(COLORIZED_DOCBOOK)

$(INDEXED_DOCBOOK): $(COLORIZED_DOCBOOK) $(INDEX_GLOSSTERMS) $(COPYRIGHT)
	$(PYTHON) $(INDEX_GLOSSTERMS) $(COLORIZED_DOCBOOK) $(INDEXED_DOCBOOK)

index.xml: $(INDEXED_DOCBOOK) $(COLLATEINDEX) $(DOCBOOK_DSSSL)
	mkdir -p $(HTML_DIR)
	$(PERL) $(COLLATEINDEX) -o index.xml -N
	(cd $(HTML_DIR) && \
	 $(JADE) -t sgml -i html -d ../$(HTML_DSSSL) -V html-index \
	      -c ../$(DOCBOOK_CATALOG) \
	      ../$(XML_DECL) ../$(INDEXED_DOCBOOK)) || (rm index.xml;false)
	$(PERL) $(COLLATEINDEX) -o index.xml $(HTML_DIR)/HTML.index
	rm $(HTML_DIR)/HTML.index

##############################################
##  HTML output generation
html: $(HTML_IMAGES) $(HTML_CHUNKS) $(HTML_NOCHUNKS)
html_nochunks: $(HTML_IMAGES) $(HTML_NOCHUNKS)

# Create the multi-file version of the tutorial.
$(HTML_CHUNKS): $(INDEXED_DOCBOOK) $(DOCBOOK_DSSSL) index.xml
	mkdir -p $(HTML_DIR)
	(cd $(HTML_DIR) && \
	 $(JADE) -t sgml -i html -d ../$(HTML_DSSSL) \
	      -c ../$(DOCBOOK_CATALOG) \
	      ../$(XML_DECL) ../$(INDEXED_DOCBOOK))

# Create the single-file version of the tutorial.
$(HTML_NOCHUNKS): $(INDEXED_DOCBOOK) $(DOCBOOK_DSSSL) index.xml
	mkdir -p $(HTML_DIR)
	$(JADE) -t sgml -i html -d $(HTML_DSSSL) -V nochunks \
	     -c $(DOCBOOK_CATALOG) \
	     $(XML_DECL) $(INDEXED_DOCBOOK) \
	     > $(HTML_NOCHUNKS)

# Copy the images.
$(HTML_IMAGES): $(PNG_IMAGES)
	mkdir -p $(HTML_DIR)/images
	cp $(PNG_IMAGES) $(HTML_DIR)/images
	touch $(HTML_IMAGES)

##############################################
##  PDF output generation
pdf: $(PDF)

$(PDF): $(INDEXED_DOCBOOK) $(EPS_IMAGES) $(DOCBOOK_DSSSL) index.xml
	$(JADE) -t tex -o $(TEX) -i print -d $(PRINT_DSSSL) \
	     -c $(DOCBOOK_CATALOG) -V tex-backend\
	     $(XML_DECL) $(INDEXED_DOCBOOK)
	$(PDFJADETEX) $(TEX) > $(TEMP) || \
	        (cat $(TEMP); rm -f $(TEMP) $(PDF); false)
	rm -f $(TEMP)
	$(PDFJADETEX) $(TEX) >/dev/null
	$(PDFJADETEX) $(TEX) >/dev/null
	rm -f $(LOG) $(AUX) $(TEX) $(OUT)

##############################################
##  Postscript output generation
ps: $(PS)
dvi: $(DVI)

$(DVI): $(INDEXED_DOCBOOK) $(EPS_IMAGES) $(DOCBOOK_DSSSL) index.xml
	$(JADE) -t tex -o $(TEX) -i print -d $(PRINT_DSSSL) \
	     -c $(DOCBOOK_CATALOG) -V tex-backend \
	     $(XML_DECL) $(INDEXED_DOCBOOK)
	$(JADETEX) $(TEX) > $(TEMP) || \
	        (cat $(TEMP); rm -f $(TEMP) $(DVI); false)
	rm -f $(TEMP)
	$(JADETEX) $(JTFMT) $(TEX) >/dev/null
	$(JADETEX) $(JTFMT) $(TEX) >/dev/null
	rm -f $(LOG) $(AUX) $(TEX)

$(PS): $(DVI)
	dvips -o $(PS) $(DVI)

ps2: $(PS2)
$(PS2): $(PS)
	psnup -2 $(PS) > $(PS2)

##############################################
##  Image conversion.

# Image conversion routines: convert from .dot
%.eps: %.dot
	$(DOT) -Tps $< -o $@

%.png: %.eps
	$(CONVERT) $< $@

# Image conversion routines: convert from postscript
%.pdf: %.ps
	$(PS2PDF) $< $@
%.eps: %.ps
	$(PS2EPS) <$< >$@

# Image conversion routines: convert from GIF
%.pnm: %.gif
	$(GIFTOPNM) $< >$@ || (rm $@; false)

# Image conversion routines: shared (pnm -> png/eps/pdf)
%.png: %.pnm
	$(PNMTOPNG) $< >$@ || (rm $@; false)
%.eps: %.pnm.ps # Don't use .ps; it would give a circular dependancy
	$(PS2EPS) <$< >$@ || (rm $@; false)
%.pdf: %.pnm.ps # Don't use .ps; it would give a circular dependancy
	$(PS2PDF) $< $@
%.pnm.ps: %.pnm
	$(PNMTOPS) $< >$@ || (rm $@; false)
