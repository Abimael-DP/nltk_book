
<!-- ==================================================== 
<section>
<title> The String Representation of Tokenized Sequences </title>

    <para>Before we can apply a regular expression to a sequence of objects,
    those objects must first be encoded in a string.  This presents a difficulty.
    We want to apply the chunker to the output of the tagger, and we want the
    output of the chunker simply add the chunking information.  However, on
    the face of it, we must first project out the tags into a string, chunk
    the string, then somehow get back to the non-string representation.  The
    following sequence of Python objects illustrate the dilemma:</para>

<programlisting><![CDATA[
# tagger output
[ 'the'/'DT'@[1], 'cat'/'NN'@[2] 'sat'/'VBD'@[3], 'on'/'IN'@[4],
'the'/'DT'@[5], 'mat'/'NN'@[6] ]

# the list of tags
[ 'DT', 'NN', 'VBD', 'IN', 'DT', 'NN' ]

# the string of tags ready for chunking
'DT NN VBD IN DT NN'

# the chunked tags
'[DT NN] VBD IN [DT NN]'

# some black magic?
[ [ 'the'/'DT'@[1], 'cat'/'NN'@[2] ], 'sat'/'VBD'@[3], 'on'/'IN'@[4],
[ 'the'/'DT'@[5],'mat'/'NN'@[6] ] ]
]]></programlisting>

    <para>The solution is to encode each token in a string which contains sufficient
    information for the token to be reconstructed, and then write chunking rules
    which only consider the tags, ignoring the types and the locations.
    The <literal>RegexpChunkParser</literal> class provides a convenient interface
    hides this additional layer of complexity from the developer.</para>

    <para>The string representation of a token is illustrated below:</para>

<programlisting><![CDATA[
# a token
'the'/'DT'@[1]

# the string encoding
'>the/DT@[1]<'
]]></programlisting>

    <para>The <literal>rechunkparser</literal> module provides a function
    <literal>tag2str</literal> which takes a list of tagged tokens and converts
    it into a string, concatenating the string encoding of each token.</para>

    <note><para>Note that no spaces are inserted between the encoded tokens.
    In the encoding, tokens are delimited with &lt; and &gt;, not with
    whitespace.</para></note>

<programlisting><![CDATA[
>>> ttokens = [ 'the'/'DT'@[1], 'cat'/'NN'@[2] 'sat'/'VBD'@[3],
'on'/'IN'@[4], 'the'/'DT'@[5], 'mat'/'NN'@[6] ]
>>> tag2str(ttokens)
'<the/DT@[1]><cat/NN@[2]><sat/VBD@[3]><on/IN@[4]><the/DT@[5]><mat/NN@[6]>'
]]></programlisting>

    <para>The chunker operates on this string, not by splitting it, but
    by inserting/removing chunk delimiters.  The <literal>rechunkparser</literal>
    module uses braces as delimiters since, unlike parentheses and square brackets, these
    do not usually need to be backslash-escaped in regular expressions.
    Thus, the chunked representation of the above example is as follows:
    </para>

<programlisting><![CDATA[
'{<the/DT@[1]><cat/NN@[2]>}<sat/VBD@[3]><on/IN@[4]>{<the/DT@[5]><mat/NN@[6]>}'
]]></programlisting>

    <para>The module provides a method called <literal>str2chunks</literal>
    which builds a chunk structure from this string.  This is what is
    returned by the chunkparser for further processing, e.g. by an
    information extraction system.</para>

    <para>It is possible to build an NLTK chunker based solely on the
    infrastructure provided above.  However, we also provide classes to
    make it easier to express chunk rules and chunk parsers.  The
    rest of the section discusses these.</para>

    </section> <<<<< The String Representation of Tokenized Sequences >>>>>

    <section> <title> Chunk Rules and Abstract Chunk Rules </title>

    <para>Chunk rules operate on strings of encoded tokens to insert
    and delete the chunk delimiters.  For instance, a rule might
    create a chunk by inserting <literal>{</literal> before the fifth
    token, and inserting <literal>}</literal> after the sixth token.
    Equally, a rule could combine two adjacent chunks by
    <emphasis>removing</emphasis> <literal>}{</literal> from the string.</para>

    <para>The
    <ulink url="&refdoc;/nltk.parser.chunk.ChunkRule-class.html"
    ><literal>ChunkRule</literal></ulink> class provides a convenient wrapper
    for Python's built-in <literal>re</literal> (regular expression) class.
    The <literal>ChunkRule</literal> constructor takes five arguments:</para>

    <itemizedlist>
      <listitem><para><emphasis>target</emphasis>
        The material that the regular expression must apply to
      </para></listitem>
      <listitem><para><emphasis>action</emphasis>
        The action performed on this material
        (i.e. reproducing the material using the <literal>\1</literal>
        construct and adding or removing braces).
      </para></listitem>
      <listitem><para><emphasis>left</emphasis>
        The left-hand context in which this rule applies.
      </para></listitem>
      <listitem><para><emphasis>right</emphasis>
        The right-hand context in which this rule applies.
      </para></listitem>
      <listitem><para><emphasis>doc</emphasis>
        Brief documentation of the function of the rule
        (e.g. <literal>'chunking groups of JJ|NN'</literal>).
      </para></listitem>
    </itemizedlist>

    <para>Both <literal>target</literal> and <literal>action</literal>
    are explicit arguments.  The remaining arguments are optional,
    keyword arguments.  Here is a chunk rule which inserts the chunk
    delimiters around any tag <literal>NN</literal>.</para>

<programlisting><![CDATA[
ChunkRule(r'(<[^>]*/NN@[^>]*>)', r'{\1}', doc='chunk NNs')
]]></programlisting>

    <note><para>Note that we use Python's raw string notation, so that
    the interpreter does not preprocess the backslash escapes.  In general,
    it is a good idea to use the raw string notation whenever regular
    expressions are involved.  We follow this practice here.</para></note>

    <para>This rule matches tokens like
    <literal>&lt;cat/NN@[1]></literal>,
    and flags them as chunks by wrapping them with the chunk
    delimiters.  This is probably the simplest kind of chunk rule,
    and it is already incomprehensible.  Therefore, the
    <literal>rechunkparser</literal> module defines a more
    convenient interface, namely the <literal>AbstractChunkRule</literal>
    class.</para>

    <para>The
    <ulink url="&refdoc;/nltk.parser.chunk.AbstractChunkRule-class.html"
    ><literal>AbstractChunkRule</literal></ulink>
    class is a simple wrapper for the <literal>ChunkRule</literal> class.
    <literal>AbstractChunkRule</literal> is a derived class whose
    initializer preprocesses its <literal>target</literal>,
    <literal>left</literal> and <literal>right</literal> arguments.
    The calling function can now employ regular expressions
    <emphasis>over the tags only</emphasis>,
    ignoring the fact that the string also contains types and
    locations.  The chunk rule we saw above can now be written
    as follows:</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<NN>)', r'{\1}', doc='chunk NNs')
]]></programlisting>

    <para>Given this simpler format it is now relatively straightforward
    to construct some quite complex chunk rules.  The first generalization
    is to note that the tags themselves have some internal structure that
    we can exploit.  For example, a plural noun is tagged <literal>NNS</literal>.
    Suppose we wished to treat all tags starting with <literal>NN</literal>
    in a single chunk rule.  We could do this as follows:</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<NN.*>)', r'{\1}', doc='chunk NNX')
]]></programlisting>

    <para>In some cases, there is no common prefix and so we are forced
    to use disjunction.  Here is a chunk rule which puts chunk delimiters
    around any individual determiner, adjective or noun.  (Adjacent chunks would then
    need to be merged by another rule.)</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<DT|JJ|NN.*>)', r'{\1}', doc='chunk DT|JJ|NNX')
]]></programlisting>

    <para>Now suppose we wished to create a single chunk which encompassed
    a sequence consisting of a determiner followed by zero or more adjectives,
    followed by a noun.  We can also use the star operator for this:</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<DT><JJ>*<NN.*>)', r'{\1}', doc='chunk DT,JJ,NNX')
]]></programlisting>

    <para>In this example, the scope of the star operator is the preceding tag
    (i.e. the material contained inside the previous pair of angle brackets).
    </para>

    <note><para>Note that the star and other regular expression operators
    behave differently depending on whether they are inside or outside the
    scope of the angle brackets.  Inside the angle brackets, the operators work
    at the character level.  Outside the angle brackets the operators apply to
    complete tags.  In other words, the angle brackets are behaving like
    ordinary parentheses in regular expressions.</para></note>

    <para>The application of chunk rules can be constrained by making use of
    the <literal>left</literal> and <literal>right</literal> context arguments.
    For example, suppose we wanted to chunk a maximal string of tags which ends
    with a verb.  Here is a possible rule:</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<.*>*)', r'{\1}', right = r'<VB.*>')
]]></programlisting>

    <note><para>Contrary to the above, for technical reasons it is
    <emphasis>not</emphasis> possible to use the left context in
    <literal>AbstractChunkRule</literal>s.  (This is because Python's
    look-behind operator requires a fixed-width pattern.)</para></note>

    <note><para>We use a special context argument to permit rules to apply
    to their own output.  The other logical possibility - embedding
    multiple parentheses in the <literal>target</literal> argument, prevents
    rules reapplying to the same context.  This is only an issue in those
    cases where the context of some rule later becomes the target of a
    separate instance of the same rule.</para></note>

    </section> <<<<< Chunk Rules and Abstract Chunk Rules >>>>>

    <section> <title> Chunk Rules and Token Strings </title>

      <para>Chunk Rules are general regular expressions which manipulate token
      strings.  In order to keep token strings well-formed, and corresponding to
      the input, a chunk rule must only add, move or delete chunk delimiters.
      Moreover, the chunk delimiters must be matching and non-nested.  Here is
      an example of a pair of rules which violate this constraint:</para>

<programlisting><![CDATA[
AbstractChunkRule(r'(<NN>)', r'{\1}', doc='chunk NNs'),
AbstractChunkRule(r'(<DT>?<JJ>*<NN>)', r'{\1}', doc='chunk NPs'),
]]></programlisting>

      <para>The first rule chunks single <literal>NN</literal>s, while the second
      rule tries to chunk whole noun phrases.  However, these two rules interact
      in an unintended way.  To see why this is the case, suppose the sequence to
      be chunked includes a determiner, adjective and noun in sequence:
      <literal>&lt;DT>&lt;JJ>&lt;NN></literal>.  The first rule will chunk
      the noun, producing <literal>&lt;DT>&lt;JJ>{&lt;NN>}</literal>.
      The second rule cannot now match on the three tags, since there is now an
      open brace between the <literal>&lt;JJ></literal> and the
      <literal>&lt;NN></literal> which was not accounted for in the rule's
      target expression.  The second rule still applies to the
      <literal>&lt;NN></literal>, and produces
      <literal>&lt;DT>&lt;JJ>{{&lt;NN>}}</literal>.
      This is illegal and will cause the parser to throw an exception.
      In order to diagnose the problem, set the debug flag and step through
      the execution of the parser.</para>

      <para>The problem with the above pair of rules is that they do not form part
      of a legal chunking <emphasis>strategy</emphasis>.  Once a chunk delimiter is
      inserted beside a tag, the only legal operations are to move or delete it.
      For more discussion about how to combine rules into strategies, see the
      section on chunking strategies below.</para>

    </section> <<<<< Chunk Rules and Token Strings >>>>>

    <section> <title> The RegexpChunkParser Class </title>

    <para>The
    <ulink url="&refdoc;/nltk.parser.chunk.RegexpChunkParser-class.html"
    ><literal>RegexpChunkParser</literal></ulink>
    allows the programmer to construct a chunkparser object from a list
    (or <emphasis>cascade</emphasis>) of chunk rules.  Suppose we have a list of
    of rules and a list of tokens.  Then we can construct
    a chunkparser and apply it as follows:</para>

<programlisting><![CDATA[
>>> chunker = RegexpChunkParser(rules, 'NP', 'S')
>>> chunker.parse(tokens)
]]></programlisting>

    <para>The <literal>parse</literal> method converts its argument to the
    string encoding, applies the chunk rules in sequence, then converts the
    result to a chunk structure and returns this structure.  Here is a
    simple example using a rule we created earlier:</para>

<programlisting><![CDATA[
>>> r1 = AbstractChunkRule(r'(<DT><JJ>*<NN>)', r'{\1}', doc="chunking <DT><JJ>*<NN>")
>>> cp = RegexpChunkParser([r1], 'NP', 'S')
>>> chunked_sent = cp.parse(unchunked_sent)
[['the'/'DT'@[1word], 'little'/'JJ'@[2word], 'cat'/'NN'@[3word]],
'sat'/'VBD'@[5word], 'on'/'IN'@[6word], ['the'/'DT'@[8word], 'mat'/'NN'@[9word]]]
]]></programlisting>

    <para>The <literal>RegexpChunkParser</literal> initializer has an optional
    second argument which is a debug flag.  If this is set (e.g. to 1) then
    the chunk parser will display diagnostic output.  We repeat the above
    example with the debug flag set:</para>

<programlisting><![CDATA[
>>> r1 = AbstractChunkRule(r'(<DT><JJ>*<NN>)', r'{\1}', doc="chunking <DT><JJ>*<NN>")
>>> cp = RegexpChunkParser([r1], 'NP', 'S', 1)
>>> chunked_sent = cp.parse(unchunked_sent)

chunking <DT><JJ>*<NN>:
left:
target: ((?:<[^/]*/(?:DT)@\d+>)(?:<[^/]*/(?:JJ)@\d+>)*(?:<[^/]*/(?:NN)@\d+>))
right:
action: {\1}
input:   <DT>  <JJ>  <NN>  <VBD>  <IN>  <DT>  <NN>
   ->   {<DT>  <JJ>  <NN>} <VBD>  <IN> {<DT>  <NN>}
]]></programlisting>

    </section> <<<<< The RegexpChunkParser Class >>>>>

  -->
