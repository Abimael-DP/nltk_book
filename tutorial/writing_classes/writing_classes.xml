<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"../../docbook/sgml/docbook/xml-dtd-4.2/docbookx.dtd" [
<!-- Base URL for the reference & tutorial documentation -->
<!ENTITY refdoc "../../api/public">
<!ENTITY tutdoc "..">

<!-- Index -->
<!ENTITY index SYSTEM "index.xml">

<!-- Copyright & License -->
<!ENTITY copyright SYSTEM "../copyright.xml">

<!-- Prompts for Python code samples -->
<!ENTITY prompt "<prompt>&gt;</prompt><prompt>&gt;</prompt><prompt>&gt;</prompt>">
<!ENTITY prompt2 "<prompt>...</prompt>">
]>

<article>
  <articleinfo>
    <author><firstname>Edward</firstname><surname>Loper</surname></author>
    <authorinitials>edl</authorinitials>
    <title>NLTK Tutorial: Writing Classes for NLTK</title>
    &copyright;
  </articleinfo>

  <section id="intro">
    <title> Introduction </title>

    <para> This tutorial is intended to help you write your own
    classes for use with the toolkit.  We assume that you understand
    the basic concepts of object-oriented programming.  If not, we
    recommend that you read chapter six of <citetitle>Learning
    Python</citetitle> (<author><surname>Lutz</surname></author> &amp;
    <author><surname>Ascher</surname></author>). </para>

    <para> You will generally be interested in writing two different
    types of classes: <glossterm>data classes</glossterm>; and
    <glossterm>processing</glossterm> (or
    <glossterm>task-oriented</glossterm>) classes. Data classes are
    used to store information that is relavant to some task.  Examples
    of data classes are <ulink url="&refdoc;/nltk.token.Location-class.html"
    ><literal>Location</literal></ulink>, <ulink
    url="&refdoc;/nltk.token.Token-class.html"
    ><literal>Token</literal></ulink>, and <ulink
    url="&refdoc;/nltk.probability.FreqDist-class.html"
    ><literal>FreqDist</literal></ulink>.  Processing classes
    define methods that can be used to perform a variety of tasks.
    Examples of processing classes are <ulink
    url="&refdoc;/nltk.tokenizer.WSTokenizer-class.html"
    ><literal>WSTokenizer</literal></ulink>, <ulink
    url="&refdoc;/nltk.tagger.UnigramTagger-class.html"
    ><literal>UnigramTagger</literal></ulink>, and <ulink
    url="&refdoc;/nltk.parser.chart.ChartParser-class.html"
    ><literal>ChartParser</literal></ulink>. </para>

  </section>

  <section id="writing_classes">
    <title> Writing Classes in Python </title>

    <para> This section gives a very brief description of Python's
    class system.  If you are already comfortable with writing classes
    in Python, you can safely skip this section.  For more in-depth
    information on how to use object-oriented programming with Python,
    please refer to a Python textbook, such as <citetitle>Learning
    Python</citetitle> (<author><surname>Lutz</surname></author> &amp;
    <author><surname>Ascher</surname></author>). </para>

    <section id="writing_classes.declaring">
      <title> Declaring Classes </title>

      <para> Python classes are declared with the
      <literal>class</literal> keyword.  This keyword begins a block,
      which should contain method definitions.  Method definitions
      have the same form as function definitions.  </para>

<programlisting><![CDATA[
    >>> class SimpleClass:
    ...     def set(self, value):
    ...         self.data = value
    ...     def get(self):
    ...         print self.data
]]></programlisting>

    </section>
    <section id="writing_classes.qualification">
      <title> Explicit Qualification </title>

      <para> Unlike methods in most object oriented languages, Python
      methods all take the object being acted on as an explicit
      argument.  This argument is conventionally called
      <literal>self</literal>, and is the first argument to any
      method.  Any member variables must be accessed through
      <literal>self</literal>.  In the above example, the
      <literal>data</literal> member variable is accessed as
      <literal>self.data</literal>.  </para>

      <para> This <glossterm>explicit qualification</glossterm> of
      member variables may seem annoying to programmers who are used
      to the more conventional <glossterm>implicit
      qualification</glossterm>.  However, it allows you to clearly
      distinguish member variables from local variables.  In fact,
      making this distinction clear is one of the reasons that many
      programmers prefer to begin member variables with a prefix (such
      as "<literal>m_</literal>"). </para>

    </section>
    <section id="writing_classes.constructors">
      <title> Constructors </title>

      <para> New member variables are created simply by assigning to
      them.  It is an error to read from a member variable before it
      has been assigned to.  To ensure that all member variables are
      properly initialized, most classes define a
      <glossterm>constructor</glossterm>.  A class's constructor is
      called whenever a new instance is created.  Like all member
      functions, it recieves the object being acted on as an explicit
      argument.  The class constructor is named
      <literal>__init__</literal>, to distinguish it from other
      methods. </para>

<programlisting><![CDATA[
    >>> class SimpleClass:
    ...     def __init__(self):
    ...         self.data = 0
    ...     def set(self, value):
    ...         self.data = value
    ...     def get(self):
    ...         print self.data
    ...
    >>> x = SimpleClass()
]]></programlisting>

      <para> If the constructor takes additional arguments, then those
      arguments must be given when creating a new instance: </para>

<programlisting><![CDATA[
    >>> class SimpleClass:
    ...     def __init__(self, initial_value):
    ...         self.data = initial_value
    ...     def set(self, value):
    ...         self.data = value
    ...     def get(self):
    ...         print self.data
    ...
    >>> x = SimpleClass(4)
]]></programlisting>

    </section>
    <section id ="writing_classes.inheritance">
      <title> Inheritance </title>

      <para> You can specify that a new class <literal>B</literal> is
      a subclass of <literal>A</literal> with the following syntax:
      </para>

<programlisting><![CDATA[
    >>> class B(A):
    ...     def __init__(self):
                 .
                 .
]]></programlisting>

      <para> You should also use this syntax to specify that a new
      class <literal>B</literal> implements the interface
      <literal>A</literal>. </para>

    </section>

  </section> <!-- Writing classes in python -->

  <section id="writing_classes.processing">
    <title> Processing Classes </title>

    <para> Processing classes define one or more methods that can be
    used to process data.  Each processing class typically implements
    some interface, which specifies the behavior for its processing
    methods.  For example, <ulink
    url="&refdoc;/nltk.tokenizer.WSTokenizer-class.html"
    ><literal>WSTokenizer</literal></ulink> is a processing class that
    implements the <ulink
    url="&refdoc;/nltk.tokenizer.TokenizerI-class.html"
    ><literal>TokenizerI</literal></ulink> interface. </para>

    <para> NLTK uses class inheritence to indicate that a class
    implements an interface.  For example, the following code defines
    a new class implementing the <literal>TokenizerI</literal>
    interface: </para>

<programlisting><![CDATA[
    >>> class SimpleTokenizer(TokenizerI):
    ...     def tokenize(self, str): 
    ...         words = str.split()
    ...         return [Token(words[i], Location(i)) 
    ...                 for i in range(len(words))]
]]></programlisting>

    <para> Whenever you define a new processing class that implements
    an interface, you must provide definitions for every method
    defined by the interface. </para>

    <section id="writing_classes.customization">
      <title> Customization Parameters </title>

      <para> Some processing classes have <emphasis>customization
      parameters</emphasis>.  These are values given to the
      constructor, which determine how the class will process its
      input.  For example, the <ulink
      url="&refdoc;/nltk.tokenizer.RETokenizer-class.html"
      ><literal>RETokenizer</literal></ulink> class takes a single
      customization parameter: a regular expression, which it uses to
      determine how it should tokenize texts. </para>

    </section>
    <section id="writing_classes.state">
      <title> State </title>

      <para> Processing classes can be either
      <glossterm>stateful</glossterm> or
      <glossterm>stateless</glossterm>.  A
      <glossterm>stateful</glossterm> processing class maintains
      dynamic information in its member variables, and uses this
      information while processing input.  For example, the <ulink
      url="&refdoc;/nltk.tagger.UnigramTagger-class.html"
      ><literal>UnigramTagger</literal></ulink> class maintains an
      internal frequency distribution, which it uses to decide which
      tag to associate with each word type. </para>

    </section>

  </section> <!-- Processing classes -->

  <section id = "writing_classes.data">
    <title> Data Classes </title>

    <note> 
      <para> (under construction) </para>
    </note>

  </section> <!-- Data Classes -->

    &index;
</article>

