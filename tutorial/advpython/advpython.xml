<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1//EN" [
<!ENTITY prompt "<prompt>&gt;</prompt><prompt>&gt;</prompt><prompt>&gt;</prompt>">
]>
<article>
  <articleinfo>
    <author><firstname>Edward</firstname><surname>Loper</surname></author>
    <authorinitials>edl</authorinitials>
    <title>NLTK Tutorial: New Python Features</title>
  </articleinfo>

  <section> <title> Introduction </title>

    <para> This tutorial explains a few new features of the Python
    language that are used by the toolkit.  Since these features are
    new to the language, they are not covered in many textbooks.  In
    particular, they are not covered in
    <author><surname>Lutz</surname></author> &amp;
    <author><surname>Ascher</surname></author>'s <citetitle>Learning
    Python</citetitle>.  </para>

  </section>

  <section> <title> String Methods </title>

    <para> Python defines a number of useful operations on strings.
    For example, <literal>find</literal> and <literal>rfind</literal>
    can be used to find occurances of substrings;
    <literal>split</literal> can be used to divide a string into
    pieces; and <literal>strip</literal> can be used to remove leading
    and trailing whitespace from a string. </para>

    <para> Before Python 2.0, these operations were accessed with the
    <literal>string</literal> module:

<!-- Emphasis is *really* not the right tag here, but I couldn't find a 
"comment" tag or anything like that --> 
<screen>
    &prompt;<command> string.find("a simple example", "simple")</command>
    2                           <emphasis># The index at which <literal>"simple"</literal> begins.</emphasis>
    &prompt;<command> string.split("a simple example")</command>
    ['a', 'simple', 'example']  <emphasis># The pieces composing the string</emphasis>
    &prompt;<command> string.strip("   another example  ")</command>
    'another example'           <emphasis># Leading and trailing whitespace removed</emphasis>
</screen>
</para>

    <para> However, starting with Python 2.0, these operations can be
    accessed directly using "string methods."  In particular, every
    function defined in the <literal>string</literal> module is now
    also available as a method on strings:

<screen>
    &prompt;<command> "a simple example".find("simple")</command>
    2                           <emphasis># The index at which <literal>"simple"</literal> begins.</emphasis>
    &prompt;<command> "a simple example".split()</command>
    ['a', 'simple', 'example']  <emphasis># The pieces composing the string</emphasis>
    &prompt;<command> "   another example  ".strip()</command>
    'another example'           <emphasis># Leading and trailing whitespace removed</emphasis>
</screen>
</para>

    <para> This new method of accessing string operations is usually
    much more convenient, and easier to understand.  If you use string
    methods, you should not need to import the string module.  </para>

    <para> Although most of the string methods are streight-forward
    and intuitive, some can be somewhat confusing to newcomers.  In
    particular, the new syntax for the <literal>join</literal> method
    can be difficult.  This operation joins a list of substrings,
    inserting a given separator between each substring.  Using the
    <literal>string</literal> library, it can be used as follows:

<screen>
    &prompt;<command> string.join(['a', 'simple', 'example'], '+')</command>
    'a+simple+example'
</screen>

    In the new syntax, <literal>join</literal> is a member of the
    <emphasis>separator</emphasis> string, not the list of substrings:

<screen>
    &prompt;<command> '+'.join(['a', 'simple', 'example'])</command>
    'a+simple+example'
</screen>

    If you try to use <literal>join</literal> as a member of the list
    of substrings, you will get an error:

<screen>
    &prompt;<command> ['a', 'simple', 'example'].join('+')</command>
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in ?
    AttributeError: join
</screen>
</para>

    <para> For more information on string methods, see the <ulink
    url="http://www.python.org/doc/2.1/lib/string-methods.html">
    Python Library Reference</ulink>. </para>

  </section>

  <section> <title> List Comprehensions </title>

    <para> List comprehensions provide a very easy means to manipulate
    lists of elements.  In particular, list comprehensions can be used
    to transform and filter lists.  A simple example of a list
    comprehension is:

<screen>
    &prompt;<command> input = range(10) </command>
    &prompt;<command> [x*x for x in input] </command>
    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</screen>

    In this example, we have produced a new list, where each element
    is obtained by squaring an element in the input list.  Using this
    pattern, we can perform a number of different transformations to
    lists.  For example, we can convert every word in a list of words
    to lower case.  This might be useful if we want to ensure that
    "The" and "the" are treated as the same word.

<screen>
    &prompt;<command> input = ['The', 'dog', 'gave', 'John', 'the', 'newspaper'] </command>
    &prompt;<command> [word.lower() for word in input] </command>
    ['the', 'dog', 'gave', 'john', 'the', 'newspaper']
</screen>
</para>

    <para> List comprehensions can also be used to filter lists.  For
    example, the following command picks out all the even numbers from
    a list:

<screen>
    &prompt;<command> input = range(10) </command>
    &prompt;<command> [x for x in input if x%2==0] </command>
    [0, 2, 4, 6, 8]
</screen>

    As another example, we could remove all determiners from a list of
    words:

<screen>
    &prompt;<command> def is_determiner(word): </command>
    ...     <command>return word.lower() in ('a', 'an', 'the') </command>
    &prompt;<command> input = ['The', 'dog', 'gave', 'John', 'the', 'newspaper'] </command>
    &prompt;<command> [word for word in input if not is_determiner(word)] </command>
    ['dog', 'gave', 'John', 'newspaper']
</screen>
</para>

    <para> Transformations and filtering can easily be combined:

<screen>
    &prompt;<command> numbers = range(10) </command>
    &prompt;<command> [x*x for x in numbers if x%2==0] </command>
    [0, 4, 16, 36, 64]
    &prompt;<command> words = ['The', 'dog', 'gave', 'John', 'the', 'newspaper'] </command>
    &prompt;<command> [word.lower() for word in words if not is_determiner(word)] </command>
    ['dog', 'gave', 'john', 'newspaper']
</screen>
</para>

    <para> Finally, list comprehensions can iterate over multiple
    lists.  In this case, it will compute the function once for each
    <emphasis>pair</emphasis> of elements:

<screen>
    &prompt;<command> xs = range(3) </command>
    &prompt;<command> ys = range(4) </command>
    &prompt;<command> [(x,y) for x in xs for y in ys] </command>
    [(0,0), (0,1), (0,2), (0,3),
     (1,0), (1,1), (1,2), (1,3),
     (2,0), (2,1), (2,2), (2,3)]
</screen>
</para>

    <para> For more information on list comprehensions, see the <ulink
    url="http://www.python.org/2.0/new-python.html#SECTION000600000000000000000">
    What's New in Python 2.0</ulink> or <ulink
    url="http://www.python.org/doc/current/tut/node7.html#SECTION007140000000000000000">
    the Python Tutorial</ulink>. </para>

  </section>

</article>