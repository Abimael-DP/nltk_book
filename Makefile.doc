# NLTK-LITE: Tutorial Makefile
#
# Copyright (C) 2001-2005 University of Pennsylvania
# Author: Steven Bird <sb@csse.unimelb.edu.au>
#         Edward Loper <edloper@gradient.cis.upenn.edu>
# URL: <http://nltk.sf.net>
# For license information, see LICENSE.TXT

TUTORIALS = index.txt preface.txt preface-nltk.txt introduction.txt programming.txt words.txt tag.txt chunk.txt structured-programming.txt parse.txt advanced-parsing.txt featgram.txt advanced-programming.txt data.txt semantics.txt evaluation.txt projects.txt nlp-python.txt nltk.txt cheat-sheet.txt

PDF := $(TUTORIALS:.txt=.pdf)
HTML := $(TUTORIALS:.txt=.html)
ERRS := $(TUTORIALS:.txt=.errs)
PY := $(TUTORIALS:.txt=.py)

PYTHON = python
PDFLATEX = TEXINPUTS=".:..:" pdflatex -halt-on-error
EXAMPLES = ../examples.py
RST = ../rst.py
RST2HTML = $(RST) --html
RST2LATEX = $(RST) --latex

WEB = stevenbird@shell.sourceforge.net:/home/groups/n/nl/nltk/htdocs/lite
RSYNC_OPTS = -arvz -e ssh --relative --cvs-exclude

CSS_STYLESHEET_PATH = ../default.css
LATEX_STYLESHEET_PATH = ../definitions.sty

.SUFFIXES: .txt .html .pdf .errs .py

help: usage
usage:
	@echo "Usage:"
	@echo "    make all         -- Build HTML & PDF output"
	@echo "    make html        -- Build HTML output"
	@echo "    make pdf         -- Build PDF output"
	@echo "    make errs        -- Run doctest to generate .errs files"
	@echo "    make clean       -- Remove all built files"

all: html pdf examples singlepdf.pdf clean_up
html: $(HTML)
pdf: $(PDF)
examples: $(PY)
errs: $(ERRS)
	ls -l $(ERRS)

clean:	clean_up
	rm -f $(PDF) $(HTML) $(ERRS) singlepdf.pdf
	rm -rf tree_images

clean_up:
	rm -f *.log *.aux *.out *.errs *~

.txt.html:
	$(RST2HTML) $<

.txt.tex:
	$(RST2LATEX) $<

# This fairly complex target here will cause pdflatex to only generate
# output if it fails; and to clean up after itself if it fails.  Also,
# it will only run a second pass if it detects that it's necessary (by
# scanning the log file for a warning message).
.tex.pdf:
	@echo "pdflatex $< -> $*.pdf (first pass)"
	@(true | $(PDFLATEX) $< >/dev/null) || \
                 (cat $*.log && rm -f $*.pdf && false)
	@if [ "`grep -i 'Warning.*Rerun' $*.log`" ]; \
	    then \
	        echo "pdflatex $< -> $*.pdf (second pass)";\
	        (true | $(PDFLATEX) $< >/dev/null) || \
                       (cat $*.log && rm -f $*.pdf && false);\
	    fi

.txt.errs:
	$(PYTHON) -c "import doctest; doctest.testfile('$<', optionflags=doctest.NORMALIZE_WHITESPACE|doctest.ELLIPSIS)" > $@

rsync-en:
	rsync $(RSYNC_OPTS) . $(WEB)/doc/en/

.txt.py:
	$(PYTHON) $(EXAMPLES) $< > $@
